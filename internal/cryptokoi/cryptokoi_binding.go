// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package cryptokoi

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// CryptoKoiBindingMetaData contains all meta data concerning the CryptoKoiBinding contract.
var CryptoKoiBindingMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"p\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"killSwitch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"addresspayable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"redeem\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"p\",\"type\":\"uint256\"}],\"name\":\"setPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x60806040523480156200001157600080fd5b506040516200400438038062004004833981810160405281019062000037919062000360565b8383816000908051906020019062000051929190620000d8565b5080600190805190602001906200006a929190620000d8565b50505033600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508160079080519060200190620000c6929190620000d8565b50806008819055505050505062000494565b828054620000e6906200045e565b90600052602060002090601f0160209004810192826200010a576000855562000156565b82601f106200012557805160ff191683800117855562000156565b8280016001018555821562000156579182015b828111156200015557825182559160200191906001019062000138565b5b50905062000165919062000169565b5090565b5b80821115620001845760008160009055506001016200016a565b5090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620001f182620001a6565b810181811067ffffffffffffffff82111715620002135762000212620001b7565b5b80604052505050565b60006200022862000188565b9050620002368282620001e6565b919050565b600067ffffffffffffffff821115620002595762000258620001b7565b5b6200026482620001a6565b9050602081019050919050565b60005b838110156200029157808201518184015260208101905062000274565b83811115620002a1576000848401525b50505050565b6000620002be620002b8846200023b565b6200021c565b905082815260208101848484011115620002dd57620002dc620001a1565b5b620002ea84828562000271565b509392505050565b600082601f8301126200030a57620003096200019c565b5b81516200031c848260208601620002a7565b91505092915050565b6000819050919050565b6200033a8162000325565b81146200034657600080fd5b50565b6000815190506200035a816200032f565b92915050565b600080600080608085870312156200037d576200037c62000192565b5b600085015167ffffffffffffffff8111156200039e576200039d62000197565b5b620003ac87828801620002f2565b945050602085015167ffffffffffffffff811115620003d057620003cf62000197565b5b620003de87828801620002f2565b935050604085015167ffffffffffffffff81111562000402576200040162000197565b5b6200041087828801620002f2565b9250506060620004238782880162000349565b91505092959194509250565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200047757607f821691505b602082108114156200048e576200048d6200042f565b5b50919050565b613b6080620004a46000396000f3fe60806040526004361061011f5760003560e01c8063853828b6116100a0578063a22cb46511610064578063a22cb465146103c4578063ada14698146103ed578063b88d4fde14610404578063c87b56dd1461042d578063e985e9c51461046a5761011f565b8063853828b6146103035780638da5cb5b1461031a57806391b7f5ed1461034557806395d89b411461036e57806398d5fdca146103995761011f565b806323b872dd116100e757806323b872dd1461020e57806342842e0e1461023757806355f804b3146102605780636352211e1461028957806370a08231146102c65761011f565b806301ffc9a71461012457806306fdde0314610161578063081812fc1461018c578063095ea7b3146101c957806310badf4e146101f2575b600080fd5b34801561013057600080fd5b5061014b6004803603810190610146919061236d565b6104a7565b60405161015891906123b5565b60405180910390f35b34801561016d57600080fd5b506101766104b9565b6040516101839190612469565b60405180910390f35b34801561019857600080fd5b506101b360048036038101906101ae91906124c1565b61054b565b6040516101c0919061252f565b60405180910390f35b3480156101d557600080fd5b506101f060048036038101906101eb9190612576565b6105d0565b005b61020c6004803603810190610207919061261b565b6106e8565b005b34801561021a57600080fd5b506102356004803603810190610230919061268f565b6107d3565b005b34801561024357600080fd5b5061025e6004803603810190610259919061268f565b610833565b005b34801561026c57600080fd5b5061028760048036038101906102829190612738565b610853565b005b34801561029557600080fd5b506102b060048036038101906102ab91906124c1565b6108f9565b6040516102bd919061252f565b60405180910390f35b3480156102d257600080fd5b506102ed60048036038101906102e89190612785565b6109ab565b6040516102fa91906127c1565b60405180910390f35b34801561030f57600080fd5b50610318610a63565b005b34801561032657600080fd5b5061032f610c48565b60405161033c91906127fd565b60405180910390f35b34801561035157600080fd5b5061036c600480360381019061036791906124c1565b610c6e565b005b34801561037a57600080fd5b50610383610d08565b6040516103909190612469565b60405180910390f35b3480156103a557600080fd5b506103ae610d9a565b6040516103bb91906127c1565b60405180910390f35b3480156103d057600080fd5b506103eb60048036038101906103e69190612844565b610da4565b005b3480156103f957600080fd5b50610402610dba565b005b34801561041057600080fd5b5061042b600480360381019061042691906129b4565b610e85565b005b34801561043957600080fd5b50610454600480360381019061044f91906124c1565b610ee7565b6040516104619190612469565b60405180910390f35b34801561047657600080fd5b50610491600480360381019061048c9190612a37565b610f8e565b60405161049e91906123b5565b60405180910390f35b60006104b282611022565b9050919050565b6060600080546104c890612aa6565b80601f01602080910402602001604051908101604052809291908181526020018280546104f490612aa6565b80156105415780601f1061051657610100808354040283529160200191610541565b820191906000526020600020905b81548152906001019060200180831161052457829003601f168201915b5050505050905090565b600061055682611104565b610595576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161058c90612b4a565b60405180910390fd5b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60006105db826108f9565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561064c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161064390612bdc565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1661066b611170565b73ffffffffffffffffffffffffffffffffffffffff16148061069a575061069981610694611170565b610f8e565b5b6106d9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106d090612c6e565b60405180910390fd5b6106e38383611178565b505050565b60085434101561072d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161072490612cda565b60405180910390fd5b61078461073a8585611231565b83838080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505061126c565b6107c3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107ba90612d46565b60405180910390fd5b6107cd84846112d0565b50505050565b6107e46107de611170565b826112ee565b610823576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161081a90612dd8565b60405180910390fd5b61082e8383836113cc565b505050565b61084e83838360405180602001604052806000815250610e85565b505050565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146108e3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108da90612e44565b60405180910390fd5b8181600791906108f492919061225e565b505050565b6000806002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156109a2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161099990612ed6565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610a1c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a1390612f68565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610af3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610aea90612e44565b60405180910390fd5b60004790506000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1682604051610b4090612fb9565b60006040518083038185875af1925050503d8060008114610b7d576040519150601f19603f3d011682016040523d82523d6000602084013e610b82565b606091505b5050905080610bc6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bbd9061301a565b60405180910390fd5b81600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610cfe576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cf590612e44565b60405180910390fd5b8060088190555050565b606060018054610d1790612aa6565b80601f0160208091040260200160405190810160405280929190818152602001828054610d4390612aa6565b8015610d905780601f10610d6557610100808354040283529160200191610d90565b820191906000526020600020905b815481529060010190602001808311610d7357829003601f168201915b5050505050905090565b6000600854905090565b610db6610daf611170565b8383611633565b5050565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610e4a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e4190612e44565b60405180910390fd5b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16ff5b610e96610e90611170565b836112ee565b610ed5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ecc90612dd8565b60405180910390fd5b610ee1848484846117a0565b50505050565b6060610ef282611104565b610f31576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f28906130ac565b60405180910390fd5b6000610f3b6117fc565b90506000815111610f5b5760405180602001604052806000815250610f86565b80610f658461188e565b604051602001610f76929190613108565b6040516020818303038152906040525b915050919050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806110ed57507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806110fd57506110fc826119ef565b5b9050919050565b60008073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff166111eb836108f9565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60006112648284604051602001611249929190613195565b60405160208183030381529060405280519060200120611a59565b905092915050565b60006112788383611a89565b73ffffffffffffffffffffffffffffffffffffffff16600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614905092915050565b6112ea828260405180602001604052806000815250611ab0565b5050565b60006112f982611104565b611338576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161132f90613233565b60405180910390fd5b6000611343836108f9565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614806113b257508373ffffffffffffffffffffffffffffffffffffffff1661139a8461054b565b73ffffffffffffffffffffffffffffffffffffffff16145b806113c357506113c28185610f8e565b5b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff166113ec826108f9565b73ffffffffffffffffffffffffffffffffffffffff1614611442576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611439906132c5565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156114b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114a990613357565b60405180910390fd5b6114bd838383611b0b565b6114c8600082611178565b6001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461151891906133a6565b925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461156f91906133da565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a461162e838383611b10565b505050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156116a2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116999061347c565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c318360405161179391906123b5565b60405180910390a3505050565b6117ab8484846113cc565b6117b784848484611b15565b6117f6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117ed9061350e565b60405180910390fd5b50505050565b60606007805461180b90612aa6565b80601f016020809104026020016040519081016040528092919081815260200182805461183790612aa6565b80156118845780601f1061185957610100808354040283529160200191611884565b820191906000526020600020905b81548152906001019060200180831161186757829003601f168201915b5050505050905090565b606060008214156118d6576040518060400160405280600181526020017f300000000000000000000000000000000000000000000000000000000000000081525090506119ea565b600082905060005b600082146119085780806118f19061352e565b915050600a8261190191906135a6565b91506118de565b60008167ffffffffffffffff81111561192457611923612889565b5b6040519080825280601f01601f1916602001820160405280156119565781602001600182028036833780820191505090505b5090505b600085146119e35760018261196f91906133a6565b9150600a8561197e91906135d7565b603061198a91906133da565b60f81b8183815181106119a05761199f613608565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a856119dc91906135a6565b945061195a565b8093505050505b919050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b600081604051602001611a6c91906136ae565b604051602081830303815290604052805190602001209050919050565b6000806000611a988585611c9d565b91509150611aa581611d20565b819250505092915050565b611aba8383611ef5565b611ac76000848484611b15565b611b06576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611afd9061350e565b60405180910390fd5b505050565b505050565b505050565b6000611b368473ffffffffffffffffffffffffffffffffffffffff166120cf565b15611c90578373ffffffffffffffffffffffffffffffffffffffff1663150b7a02611b5f611170565b8786866040518563ffffffff1660e01b8152600401611b819493929190613729565b6020604051808303816000875af1925050508015611bbd57506040513d601f19601f82011682018060405250810190611bba919061378a565b60015b611c40573d8060008114611bed576040519150601f19603f3d011682016040523d82523d6000602084013e611bf2565b606091505b50600081511415611c38576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c2f9061350e565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050611c95565b600190505b949350505050565b600080604183511415611cdf5760008060006020860151925060408601519150606086015160001a9050611cd3878285856120f2565b94509450505050611d19565b604083511415611d10576000806020850151915060408501519050611d058683836121ff565b935093505050611d19565b60006002915091505b9250929050565b60006004811115611d3457611d336137b7565b5b816004811115611d4757611d466137b7565b5b1415611d5257611ef2565b60016004811115611d6657611d656137b7565b5b816004811115611d7957611d786137b7565b5b1415611dba576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611db190613832565b60405180910390fd5b60026004811115611dce57611dcd6137b7565b5b816004811115611de157611de06137b7565b5b1415611e22576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e199061389e565b60405180910390fd5b60036004811115611e3657611e356137b7565b5b816004811115611e4957611e486137b7565b5b1415611e8a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e8190613930565b60405180910390fd5b600480811115611e9d57611e9c6137b7565b5b816004811115611eb057611eaf6137b7565b5b1415611ef1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ee8906139c2565b60405180910390fd5b5b50565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611f65576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f5c90613a2e565b60405180910390fd5b611f6e81611104565b15611fae576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fa590613a9a565b60405180910390fd5b611fba60008383611b0b565b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461200a91906133da565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a46120cb60008383611b10565b5050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08360001c111561212d5760006003915091506121f6565b601b8560ff16141580156121455750601c8560ff1614155b156121575760006004915091506121f6565b60006001878787876040516000815260200160405260405161217c9493929190613ae5565b6020604051602081039080840390855afa15801561219e573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156121ed576000600192509250506121f6565b80600092509250505b94509492505050565b60008060007f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60001b841690506000601b60ff8660001c901c61224291906133da565b9050612250878288856120f2565b935093505050935093915050565b82805461226a90612aa6565b90600052602060002090601f01602090048101928261228c57600085556122d3565b82601f106122a557803560ff19168380011785556122d3565b828001600101855582156122d3579182015b828111156122d25782358255916020019190600101906122b7565b5b5090506122e091906122e4565b5090565b5b808211156122fd5760008160009055506001016122e5565b5090565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61234a81612315565b811461235557600080fd5b50565b60008135905061236781612341565b92915050565b6000602082840312156123835761238261230b565b5b600061239184828501612358565b91505092915050565b60008115159050919050565b6123af8161239a565b82525050565b60006020820190506123ca60008301846123a6565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561240a5780820151818401526020810190506123ef565b83811115612419576000848401525b50505050565b6000601f19601f8301169050919050565b600061243b826123d0565b61244581856123db565b93506124558185602086016123ec565b61245e8161241f565b840191505092915050565b600060208201905081810360008301526124838184612430565b905092915050565b6000819050919050565b61249e8161248b565b81146124a957600080fd5b50565b6000813590506124bb81612495565b92915050565b6000602082840312156124d7576124d661230b565b5b60006124e5848285016124ac565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000612519826124ee565b9050919050565b6125298161250e565b82525050565b60006020820190506125446000830184612520565b92915050565b6125538161250e565b811461255e57600080fd5b50565b6000813590506125708161254a565b92915050565b6000806040838503121561258d5761258c61230b565b5b600061259b85828601612561565b92505060206125ac858286016124ac565b9150509250929050565b600080fd5b600080fd5b600080fd5b60008083601f8401126125db576125da6125b6565b5b8235905067ffffffffffffffff8111156125f8576125f76125bb565b5b602083019150836001820283011115612614576126136125c0565b5b9250929050565b600080600080606085870312156126355761263461230b565b5b600061264387828801612561565b9450506020612654878288016124ac565b935050604085013567ffffffffffffffff81111561267557612674612310565b5b612681878288016125c5565b925092505092959194509250565b6000806000606084860312156126a8576126a761230b565b5b60006126b686828701612561565b93505060206126c786828701612561565b92505060406126d8868287016124ac565b9150509250925092565b60008083601f8401126126f8576126f76125b6565b5b8235905067ffffffffffffffff811115612715576127146125bb565b5b602083019150836001820283011115612731576127306125c0565b5b9250929050565b6000806020838503121561274f5761274e61230b565b5b600083013567ffffffffffffffff81111561276d5761276c612310565b5b612779858286016126e2565b92509250509250929050565b60006020828403121561279b5761279a61230b565b5b60006127a984828501612561565b91505092915050565b6127bb8161248b565b82525050565b60006020820190506127d660008301846127b2565b92915050565b60006127e7826124ee565b9050919050565b6127f7816127dc565b82525050565b600060208201905061281260008301846127ee565b92915050565b6128218161239a565b811461282c57600080fd5b50565b60008135905061283e81612818565b92915050565b6000806040838503121561285b5761285a61230b565b5b600061286985828601612561565b925050602061287a8582860161282f565b9150509250929050565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6128c18261241f565b810181811067ffffffffffffffff821117156128e0576128df612889565b5b80604052505050565b60006128f3612301565b90506128ff82826128b8565b919050565b600067ffffffffffffffff82111561291f5761291e612889565b5b6129288261241f565b9050602081019050919050565b82818337600083830152505050565b600061295761295284612904565b6128e9565b90508281526020810184848401111561297357612972612884565b5b61297e848285612935565b509392505050565b600082601f83011261299b5761299a6125b6565b5b81356129ab848260208601612944565b91505092915050565b600080600080608085870312156129ce576129cd61230b565b5b60006129dc87828801612561565b94505060206129ed87828801612561565b93505060406129fe878288016124ac565b925050606085013567ffffffffffffffff811115612a1f57612a1e612310565b5b612a2b87828801612986565b91505092959194509250565b60008060408385031215612a4e57612a4d61230b565b5b6000612a5c85828601612561565b9250506020612a6d85828601612561565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680612abe57607f821691505b60208210811415612ad257612ad1612a77565b5b50919050565b7f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b6000612b34602c836123db565b9150612b3f82612ad8565b604082019050919050565b60006020820190508181036000830152612b6381612b27565b9050919050565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b6000612bc66021836123db565b9150612bd182612b6a565b604082019050919050565b60006020820190508181036000830152612bf581612bb9565b9050919050565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760008201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000602082015250565b6000612c586038836123db565b9150612c6382612bfc565b604082019050919050565b60006020820190508181036000830152612c8781612c4b565b9050919050565b7f496e73756666696369656e742066756e64730000000000000000000000000000600082015250565b6000612cc46012836123db565b9150612ccf82612c8e565b602082019050919050565b60006020820190508181036000830152612cf381612cb7565b9050919050565b7f496e76616c6964207369676e6174757265000000000000000000000000000000600082015250565b6000612d306011836123db565b9150612d3b82612cfa565b602082019050919050565b60006020820190508181036000830152612d5f81612d23565b9050919050565b7f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60008201527f776e6572206e6f7220617070726f766564000000000000000000000000000000602082015250565b6000612dc26031836123db565b9150612dcd82612d66565b604082019050919050565b60006020820190508181036000830152612df181612db5565b9050919050565b7f4f776e65722070726976696c656765206f6e6c79000000000000000000000000600082015250565b6000612e2e6014836123db565b9150612e3982612df8565b602082019050919050565b60006020820190508181036000830152612e5d81612e21565b9050919050565b7f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460008201527f656e7420746f6b656e0000000000000000000000000000000000000000000000602082015250565b6000612ec06029836123db565b9150612ecb82612e64565b604082019050919050565b60006020820190508181036000830152612eef81612eb3565b9050919050565b7f4552433732313a2062616c616e636520717565727920666f7220746865207a6560008201527f726f206164647265737300000000000000000000000000000000000000000000602082015250565b6000612f52602a836123db565b9150612f5d82612ef6565b604082019050919050565b60006020820190508181036000830152612f8181612f45565b9050919050565b600081905092915050565b50565b6000612fa3600083612f88565b9150612fae82612f93565b600082019050919050565b6000612fc482612f96565b9150819050919050565b7f7769746864726177416c6c3a205472616e73666572206661696c656400000000600082015250565b6000613004601c836123db565b915061300f82612fce565b602082019050919050565b6000602082019050818103600083015261303381612ff7565b9050919050565b7f4552433732314d657461646174613a2055524920717565727920666f72206e6f60008201527f6e6578697374656e7420746f6b656e0000000000000000000000000000000000602082015250565b6000613096602f836123db565b91506130a18261303a565b604082019050919050565b600060208201905081810360008301526130c581613089565b9050919050565b600081905092915050565b60006130e2826123d0565b6130ec81856130cc565b93506130fc8185602086016123ec565b80840191505092915050565b600061311482856130d7565b915061312082846130d7565b91508190509392505050565b6000819050919050565b6131476131428261248b565b61312c565b82525050565b60008160601b9050919050565b60006131658261314d565b9050919050565b60006131778261315a565b9050919050565b61318f61318a8261250e565b61316c565b82525050565b60006131a18285613136565b6020820191506131b1828461317e565b6014820191508190509392505050565b7f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b600061321d602c836123db565b9150613228826131c1565b604082019050919050565b6000602082019050818103600083015261324c81613210565b9050919050565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b60006132af6025836123db565b91506132ba82613253565b604082019050919050565b600060208201905081810360008301526132de816132a2565b9050919050565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b60006133416024836123db565b915061334c826132e5565b604082019050919050565b6000602082019050818103600083015261337081613334565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006133b18261248b565b91506133bc8361248b565b9250828210156133cf576133ce613377565b5b828203905092915050565b60006133e58261248b565b91506133f08361248b565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561342557613424613377565b5b828201905092915050565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b60006134666019836123db565b915061347182613430565b602082019050919050565b6000602082019050818103600083015261349581613459565b9050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b60006134f86032836123db565b91506135038261349c565b604082019050919050565b60006020820190508181036000830152613527816134eb565b9050919050565b60006135398261248b565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561356c5761356b613377565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006135b18261248b565b91506135bc8361248b565b9250826135cc576135cb613577565b5b828204905092915050565b60006135e28261248b565b91506135ed8361248b565b9250826135fd576135fc613577565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f19457468657265756d205369676e6564204d6573736167653a0a333200000000600082015250565b600061366d601c836130cc565b915061367882613637565b601c82019050919050565b6000819050919050565b6000819050919050565b6136a86136a382613683565b61368d565b82525050565b60006136b982613660565b91506136c58284613697565b60208201915081905092915050565b600081519050919050565b600082825260208201905092915050565b60006136fb826136d4565b61370581856136df565b93506137158185602086016123ec565b61371e8161241f565b840191505092915050565b600060808201905061373e6000830187612520565b61374b6020830186612520565b61375860408301856127b2565b818103606083015261376a81846136f0565b905095945050505050565b60008151905061378481612341565b92915050565b6000602082840312156137a05761379f61230b565b5b60006137ae84828501613775565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f45434453413a20696e76616c6964207369676e61747572650000000000000000600082015250565b600061381c6018836123db565b9150613827826137e6565b602082019050919050565b6000602082019050818103600083015261384b8161380f565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265206c656e67746800600082015250565b6000613888601f836123db565b915061389382613852565b602082019050919050565b600060208201905081810360008301526138b78161387b565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265202773272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b600061391a6022836123db565b9150613925826138be565b604082019050919050565b600060208201905081810360008301526139498161390d565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265202776272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b60006139ac6022836123db565b91506139b782613950565b604082019050919050565b600060208201905081810360008301526139db8161399f565b9050919050565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b6000613a186020836123db565b9150613a23826139e2565b602082019050919050565b60006020820190508181036000830152613a4781613a0b565b9050919050565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b6000613a84601c836123db565b9150613a8f82613a4e565b602082019050919050565b60006020820190508181036000830152613ab381613a77565b9050919050565b613ac381613683565b82525050565b600060ff82169050919050565b613adf81613ac9565b82525050565b6000608082019050613afa6000830187613aba565b613b076020830186613ad6565b613b146040830185613aba565b613b216060830184613aba565b9594505050505056fea26469706673582212205241c51258a69c3ca357b386cc295e74430f0544bc7163c1d8bf9ea1aa934c0464736f6c634300080c0033",
}

// CryptoKoiBindingABI is the input ABI used to generate the binding from.
// Deprecated: Use CryptoKoiBindingMetaData.ABI instead.
var CryptoKoiBindingABI = CryptoKoiBindingMetaData.ABI

// CryptoKoiBindingBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use CryptoKoiBindingMetaData.Bin instead.
var CryptoKoiBindingBin = CryptoKoiBindingMetaData.Bin

// DeployCryptoKoiBinding deploys a new Ethereum contract, binding an instance of CryptoKoiBinding to it.
func DeployCryptoKoiBinding(auth *bind.TransactOpts, backend bind.ContractBackend, name string, symbol string, uri string, p *big.Int) (common.Address, *types.Transaction, *CryptoKoiBinding, error) {
	parsed, err := CryptoKoiBindingMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(CryptoKoiBindingBin), backend, name, symbol, uri, p)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &CryptoKoiBinding{CryptoKoiBindingCaller: CryptoKoiBindingCaller{contract: contract}, CryptoKoiBindingTransactor: CryptoKoiBindingTransactor{contract: contract}, CryptoKoiBindingFilterer: CryptoKoiBindingFilterer{contract: contract}}, nil
}

// CryptoKoiBinding is an auto generated Go binding around an Ethereum contract.
type CryptoKoiBinding struct {
	CryptoKoiBindingCaller     // Read-only binding to the contract
	CryptoKoiBindingTransactor // Write-only binding to the contract
	CryptoKoiBindingFilterer   // Log filterer for contract events
}

// CryptoKoiBindingCaller is an auto generated read-only Go binding around an Ethereum contract.
type CryptoKoiBindingCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CryptoKoiBindingTransactor is an auto generated write-only Go binding around an Ethereum contract.
type CryptoKoiBindingTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CryptoKoiBindingFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type CryptoKoiBindingFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CryptoKoiBindingSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type CryptoKoiBindingSession struct {
	Contract     *CryptoKoiBinding // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// CryptoKoiBindingCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type CryptoKoiBindingCallerSession struct {
	Contract *CryptoKoiBindingCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts           // Call options to use throughout this session
}

// CryptoKoiBindingTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type CryptoKoiBindingTransactorSession struct {
	Contract     *CryptoKoiBindingTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts           // Transaction auth options to use throughout this session
}

// CryptoKoiBindingRaw is an auto generated low-level Go binding around an Ethereum contract.
type CryptoKoiBindingRaw struct {
	Contract *CryptoKoiBinding // Generic contract binding to access the raw methods on
}

// CryptoKoiBindingCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type CryptoKoiBindingCallerRaw struct {
	Contract *CryptoKoiBindingCaller // Generic read-only contract binding to access the raw methods on
}

// CryptoKoiBindingTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type CryptoKoiBindingTransactorRaw struct {
	Contract *CryptoKoiBindingTransactor // Generic write-only contract binding to access the raw methods on
}

// NewCryptoKoiBinding creates a new instance of CryptoKoiBinding, bound to a specific deployed contract.
func NewCryptoKoiBinding(address common.Address, backend bind.ContractBackend) (*CryptoKoiBinding, error) {
	contract, err := bindCryptoKoiBinding(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &CryptoKoiBinding{CryptoKoiBindingCaller: CryptoKoiBindingCaller{contract: contract}, CryptoKoiBindingTransactor: CryptoKoiBindingTransactor{contract: contract}, CryptoKoiBindingFilterer: CryptoKoiBindingFilterer{contract: contract}}, nil
}

// NewCryptoKoiBindingCaller creates a new read-only instance of CryptoKoiBinding, bound to a specific deployed contract.
func NewCryptoKoiBindingCaller(address common.Address, caller bind.ContractCaller) (*CryptoKoiBindingCaller, error) {
	contract, err := bindCryptoKoiBinding(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &CryptoKoiBindingCaller{contract: contract}, nil
}

// NewCryptoKoiBindingTransactor creates a new write-only instance of CryptoKoiBinding, bound to a specific deployed contract.
func NewCryptoKoiBindingTransactor(address common.Address, transactor bind.ContractTransactor) (*CryptoKoiBindingTransactor, error) {
	contract, err := bindCryptoKoiBinding(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &CryptoKoiBindingTransactor{contract: contract}, nil
}

// NewCryptoKoiBindingFilterer creates a new log filterer instance of CryptoKoiBinding, bound to a specific deployed contract.
func NewCryptoKoiBindingFilterer(address common.Address, filterer bind.ContractFilterer) (*CryptoKoiBindingFilterer, error) {
	contract, err := bindCryptoKoiBinding(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &CryptoKoiBindingFilterer{contract: contract}, nil
}

// bindCryptoKoiBinding binds a generic wrapper to an already deployed contract.
func bindCryptoKoiBinding(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(CryptoKoiBindingABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_CryptoKoiBinding *CryptoKoiBindingRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _CryptoKoiBinding.Contract.CryptoKoiBindingCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_CryptoKoiBinding *CryptoKoiBindingRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CryptoKoiBinding.Contract.CryptoKoiBindingTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_CryptoKoiBinding *CryptoKoiBindingRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _CryptoKoiBinding.Contract.CryptoKoiBindingTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_CryptoKoiBinding *CryptoKoiBindingCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _CryptoKoiBinding.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_CryptoKoiBinding *CryptoKoiBindingTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CryptoKoiBinding.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_CryptoKoiBinding *CryptoKoiBindingTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _CryptoKoiBinding.Contract.contract.Transact(opts, method, params...)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_CryptoKoiBinding *CryptoKoiBindingCaller) BalanceOf(opts *bind.CallOpts, owner common.Address) (*big.Int, error) {
	var out []interface{}
	err := _CryptoKoiBinding.contract.Call(opts, &out, "balanceOf", owner)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_CryptoKoiBinding *CryptoKoiBindingSession) BalanceOf(owner common.Address) (*big.Int, error) {
	return _CryptoKoiBinding.Contract.BalanceOf(&_CryptoKoiBinding.CallOpts, owner)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_CryptoKoiBinding *CryptoKoiBindingCallerSession) BalanceOf(owner common.Address) (*big.Int, error) {
	return _CryptoKoiBinding.Contract.BalanceOf(&_CryptoKoiBinding.CallOpts, owner)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_CryptoKoiBinding *CryptoKoiBindingCaller) GetApproved(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _CryptoKoiBinding.contract.Call(opts, &out, "getApproved", tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_CryptoKoiBinding *CryptoKoiBindingSession) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _CryptoKoiBinding.Contract.GetApproved(&_CryptoKoiBinding.CallOpts, tokenId)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_CryptoKoiBinding *CryptoKoiBindingCallerSession) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _CryptoKoiBinding.Contract.GetApproved(&_CryptoKoiBinding.CallOpts, tokenId)
}

// GetPrice is a free data retrieval call binding the contract method 0x98d5fdca.
//
// Solidity: function getPrice() view returns(uint256)
func (_CryptoKoiBinding *CryptoKoiBindingCaller) GetPrice(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _CryptoKoiBinding.contract.Call(opts, &out, "getPrice")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetPrice is a free data retrieval call binding the contract method 0x98d5fdca.
//
// Solidity: function getPrice() view returns(uint256)
func (_CryptoKoiBinding *CryptoKoiBindingSession) GetPrice() (*big.Int, error) {
	return _CryptoKoiBinding.Contract.GetPrice(&_CryptoKoiBinding.CallOpts)
}

// GetPrice is a free data retrieval call binding the contract method 0x98d5fdca.
//
// Solidity: function getPrice() view returns(uint256)
func (_CryptoKoiBinding *CryptoKoiBindingCallerSession) GetPrice() (*big.Int, error) {
	return _CryptoKoiBinding.Contract.GetPrice(&_CryptoKoiBinding.CallOpts)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_CryptoKoiBinding *CryptoKoiBindingCaller) IsApprovedForAll(opts *bind.CallOpts, owner common.Address, operator common.Address) (bool, error) {
	var out []interface{}
	err := _CryptoKoiBinding.contract.Call(opts, &out, "isApprovedForAll", owner, operator)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_CryptoKoiBinding *CryptoKoiBindingSession) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _CryptoKoiBinding.Contract.IsApprovedForAll(&_CryptoKoiBinding.CallOpts, owner, operator)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_CryptoKoiBinding *CryptoKoiBindingCallerSession) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _CryptoKoiBinding.Contract.IsApprovedForAll(&_CryptoKoiBinding.CallOpts, owner, operator)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_CryptoKoiBinding *CryptoKoiBindingCaller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _CryptoKoiBinding.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_CryptoKoiBinding *CryptoKoiBindingSession) Name() (string, error) {
	return _CryptoKoiBinding.Contract.Name(&_CryptoKoiBinding.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_CryptoKoiBinding *CryptoKoiBindingCallerSession) Name() (string, error) {
	return _CryptoKoiBinding.Contract.Name(&_CryptoKoiBinding.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_CryptoKoiBinding *CryptoKoiBindingCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _CryptoKoiBinding.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_CryptoKoiBinding *CryptoKoiBindingSession) Owner() (common.Address, error) {
	return _CryptoKoiBinding.Contract.Owner(&_CryptoKoiBinding.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_CryptoKoiBinding *CryptoKoiBindingCallerSession) Owner() (common.Address, error) {
	return _CryptoKoiBinding.Contract.Owner(&_CryptoKoiBinding.CallOpts)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_CryptoKoiBinding *CryptoKoiBindingCaller) OwnerOf(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _CryptoKoiBinding.contract.Call(opts, &out, "ownerOf", tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_CryptoKoiBinding *CryptoKoiBindingSession) OwnerOf(tokenId *big.Int) (common.Address, error) {
	return _CryptoKoiBinding.Contract.OwnerOf(&_CryptoKoiBinding.CallOpts, tokenId)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_CryptoKoiBinding *CryptoKoiBindingCallerSession) OwnerOf(tokenId *big.Int) (common.Address, error) {
	return _CryptoKoiBinding.Contract.OwnerOf(&_CryptoKoiBinding.CallOpts, tokenId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_CryptoKoiBinding *CryptoKoiBindingCaller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _CryptoKoiBinding.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_CryptoKoiBinding *CryptoKoiBindingSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _CryptoKoiBinding.Contract.SupportsInterface(&_CryptoKoiBinding.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_CryptoKoiBinding *CryptoKoiBindingCallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _CryptoKoiBinding.Contract.SupportsInterface(&_CryptoKoiBinding.CallOpts, interfaceId)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_CryptoKoiBinding *CryptoKoiBindingCaller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _CryptoKoiBinding.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_CryptoKoiBinding *CryptoKoiBindingSession) Symbol() (string, error) {
	return _CryptoKoiBinding.Contract.Symbol(&_CryptoKoiBinding.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_CryptoKoiBinding *CryptoKoiBindingCallerSession) Symbol() (string, error) {
	return _CryptoKoiBinding.Contract.Symbol(&_CryptoKoiBinding.CallOpts)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_CryptoKoiBinding *CryptoKoiBindingCaller) TokenURI(opts *bind.CallOpts, tokenId *big.Int) (string, error) {
	var out []interface{}
	err := _CryptoKoiBinding.contract.Call(opts, &out, "tokenURI", tokenId)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_CryptoKoiBinding *CryptoKoiBindingSession) TokenURI(tokenId *big.Int) (string, error) {
	return _CryptoKoiBinding.Contract.TokenURI(&_CryptoKoiBinding.CallOpts, tokenId)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_CryptoKoiBinding *CryptoKoiBindingCallerSession) TokenURI(tokenId *big.Int) (string, error) {
	return _CryptoKoiBinding.Contract.TokenURI(&_CryptoKoiBinding.CallOpts, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_CryptoKoiBinding *CryptoKoiBindingTransactor) Approve(opts *bind.TransactOpts, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _CryptoKoiBinding.contract.Transact(opts, "approve", to, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_CryptoKoiBinding *CryptoKoiBindingSession) Approve(to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _CryptoKoiBinding.Contract.Approve(&_CryptoKoiBinding.TransactOpts, to, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_CryptoKoiBinding *CryptoKoiBindingTransactorSession) Approve(to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _CryptoKoiBinding.Contract.Approve(&_CryptoKoiBinding.TransactOpts, to, tokenId)
}

// KillSwitch is a paid mutator transaction binding the contract method 0xada14698.
//
// Solidity: function killSwitch() returns()
func (_CryptoKoiBinding *CryptoKoiBindingTransactor) KillSwitch(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CryptoKoiBinding.contract.Transact(opts, "killSwitch")
}

// KillSwitch is a paid mutator transaction binding the contract method 0xada14698.
//
// Solidity: function killSwitch() returns()
func (_CryptoKoiBinding *CryptoKoiBindingSession) KillSwitch() (*types.Transaction, error) {
	return _CryptoKoiBinding.Contract.KillSwitch(&_CryptoKoiBinding.TransactOpts)
}

// KillSwitch is a paid mutator transaction binding the contract method 0xada14698.
//
// Solidity: function killSwitch() returns()
func (_CryptoKoiBinding *CryptoKoiBindingTransactorSession) KillSwitch() (*types.Transaction, error) {
	return _CryptoKoiBinding.Contract.KillSwitch(&_CryptoKoiBinding.TransactOpts)
}

// Redeem is a paid mutator transaction binding the contract method 0x10badf4e.
//
// Solidity: function redeem(address account, uint256 tokenId, bytes signature) payable returns()
func (_CryptoKoiBinding *CryptoKoiBindingTransactor) Redeem(opts *bind.TransactOpts, account common.Address, tokenId *big.Int, signature []byte) (*types.Transaction, error) {
	return _CryptoKoiBinding.contract.Transact(opts, "redeem", account, tokenId, signature)
}

// Redeem is a paid mutator transaction binding the contract method 0x10badf4e.
//
// Solidity: function redeem(address account, uint256 tokenId, bytes signature) payable returns()
func (_CryptoKoiBinding *CryptoKoiBindingSession) Redeem(account common.Address, tokenId *big.Int, signature []byte) (*types.Transaction, error) {
	return _CryptoKoiBinding.Contract.Redeem(&_CryptoKoiBinding.TransactOpts, account, tokenId, signature)
}

// Redeem is a paid mutator transaction binding the contract method 0x10badf4e.
//
// Solidity: function redeem(address account, uint256 tokenId, bytes signature) payable returns()
func (_CryptoKoiBinding *CryptoKoiBindingTransactorSession) Redeem(account common.Address, tokenId *big.Int, signature []byte) (*types.Transaction, error) {
	return _CryptoKoiBinding.Contract.Redeem(&_CryptoKoiBinding.TransactOpts, account, tokenId, signature)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_CryptoKoiBinding *CryptoKoiBindingTransactor) SafeTransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _CryptoKoiBinding.contract.Transact(opts, "safeTransferFrom", from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_CryptoKoiBinding *CryptoKoiBindingSession) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _CryptoKoiBinding.Contract.SafeTransferFrom(&_CryptoKoiBinding.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_CryptoKoiBinding *CryptoKoiBindingTransactorSession) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _CryptoKoiBinding.Contract.SafeTransferFrom(&_CryptoKoiBinding.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes _data) returns()
func (_CryptoKoiBinding *CryptoKoiBindingTransactor) SafeTransferFrom0(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int, _data []byte) (*types.Transaction, error) {
	return _CryptoKoiBinding.contract.Transact(opts, "safeTransferFrom0", from, to, tokenId, _data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes _data) returns()
func (_CryptoKoiBinding *CryptoKoiBindingSession) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, _data []byte) (*types.Transaction, error) {
	return _CryptoKoiBinding.Contract.SafeTransferFrom0(&_CryptoKoiBinding.TransactOpts, from, to, tokenId, _data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes _data) returns()
func (_CryptoKoiBinding *CryptoKoiBindingTransactorSession) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, _data []byte) (*types.Transaction, error) {
	return _CryptoKoiBinding.Contract.SafeTransferFrom0(&_CryptoKoiBinding.TransactOpts, from, to, tokenId, _data)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_CryptoKoiBinding *CryptoKoiBindingTransactor) SetApprovalForAll(opts *bind.TransactOpts, operator common.Address, approved bool) (*types.Transaction, error) {
	return _CryptoKoiBinding.contract.Transact(opts, "setApprovalForAll", operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_CryptoKoiBinding *CryptoKoiBindingSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _CryptoKoiBinding.Contract.SetApprovalForAll(&_CryptoKoiBinding.TransactOpts, operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_CryptoKoiBinding *CryptoKoiBindingTransactorSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _CryptoKoiBinding.Contract.SetApprovalForAll(&_CryptoKoiBinding.TransactOpts, operator, approved)
}

// SetBaseURI is a paid mutator transaction binding the contract method 0x55f804b3.
//
// Solidity: function setBaseURI(string uri) returns()
func (_CryptoKoiBinding *CryptoKoiBindingTransactor) SetBaseURI(opts *bind.TransactOpts, uri string) (*types.Transaction, error) {
	return _CryptoKoiBinding.contract.Transact(opts, "setBaseURI", uri)
}

// SetBaseURI is a paid mutator transaction binding the contract method 0x55f804b3.
//
// Solidity: function setBaseURI(string uri) returns()
func (_CryptoKoiBinding *CryptoKoiBindingSession) SetBaseURI(uri string) (*types.Transaction, error) {
	return _CryptoKoiBinding.Contract.SetBaseURI(&_CryptoKoiBinding.TransactOpts, uri)
}

// SetBaseURI is a paid mutator transaction binding the contract method 0x55f804b3.
//
// Solidity: function setBaseURI(string uri) returns()
func (_CryptoKoiBinding *CryptoKoiBindingTransactorSession) SetBaseURI(uri string) (*types.Transaction, error) {
	return _CryptoKoiBinding.Contract.SetBaseURI(&_CryptoKoiBinding.TransactOpts, uri)
}

// SetPrice is a paid mutator transaction binding the contract method 0x91b7f5ed.
//
// Solidity: function setPrice(uint256 p) returns()
func (_CryptoKoiBinding *CryptoKoiBindingTransactor) SetPrice(opts *bind.TransactOpts, p *big.Int) (*types.Transaction, error) {
	return _CryptoKoiBinding.contract.Transact(opts, "setPrice", p)
}

// SetPrice is a paid mutator transaction binding the contract method 0x91b7f5ed.
//
// Solidity: function setPrice(uint256 p) returns()
func (_CryptoKoiBinding *CryptoKoiBindingSession) SetPrice(p *big.Int) (*types.Transaction, error) {
	return _CryptoKoiBinding.Contract.SetPrice(&_CryptoKoiBinding.TransactOpts, p)
}

// SetPrice is a paid mutator transaction binding the contract method 0x91b7f5ed.
//
// Solidity: function setPrice(uint256 p) returns()
func (_CryptoKoiBinding *CryptoKoiBindingTransactorSession) SetPrice(p *big.Int) (*types.Transaction, error) {
	return _CryptoKoiBinding.Contract.SetPrice(&_CryptoKoiBinding.TransactOpts, p)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_CryptoKoiBinding *CryptoKoiBindingTransactor) TransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _CryptoKoiBinding.contract.Transact(opts, "transferFrom", from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_CryptoKoiBinding *CryptoKoiBindingSession) TransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _CryptoKoiBinding.Contract.TransferFrom(&_CryptoKoiBinding.TransactOpts, from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_CryptoKoiBinding *CryptoKoiBindingTransactorSession) TransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _CryptoKoiBinding.Contract.TransferFrom(&_CryptoKoiBinding.TransactOpts, from, to, tokenId)
}

// WithdrawAll is a paid mutator transaction binding the contract method 0x853828b6.
//
// Solidity: function withdrawAll() returns()
func (_CryptoKoiBinding *CryptoKoiBindingTransactor) WithdrawAll(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CryptoKoiBinding.contract.Transact(opts, "withdrawAll")
}

// WithdrawAll is a paid mutator transaction binding the contract method 0x853828b6.
//
// Solidity: function withdrawAll() returns()
func (_CryptoKoiBinding *CryptoKoiBindingSession) WithdrawAll() (*types.Transaction, error) {
	return _CryptoKoiBinding.Contract.WithdrawAll(&_CryptoKoiBinding.TransactOpts)
}

// WithdrawAll is a paid mutator transaction binding the contract method 0x853828b6.
//
// Solidity: function withdrawAll() returns()
func (_CryptoKoiBinding *CryptoKoiBindingTransactorSession) WithdrawAll() (*types.Transaction, error) {
	return _CryptoKoiBinding.Contract.WithdrawAll(&_CryptoKoiBinding.TransactOpts)
}

// CryptoKoiBindingApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the CryptoKoiBinding contract.
type CryptoKoiBindingApprovalIterator struct {
	Event *CryptoKoiBindingApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CryptoKoiBindingApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CryptoKoiBindingApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CryptoKoiBindingApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CryptoKoiBindingApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CryptoKoiBindingApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CryptoKoiBindingApproval represents a Approval event raised by the CryptoKoiBinding contract.
type CryptoKoiBindingApproval struct {
	Owner    common.Address
	Approved common.Address
	TokenId  *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_CryptoKoiBinding *CryptoKoiBindingFilterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, approved []common.Address, tokenId []*big.Int) (*CryptoKoiBindingApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _CryptoKoiBinding.contract.FilterLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &CryptoKoiBindingApprovalIterator{contract: _CryptoKoiBinding.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_CryptoKoiBinding *CryptoKoiBindingFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *CryptoKoiBindingApproval, owner []common.Address, approved []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _CryptoKoiBinding.contract.WatchLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CryptoKoiBindingApproval)
				if err := _CryptoKoiBinding.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_CryptoKoiBinding *CryptoKoiBindingFilterer) ParseApproval(log types.Log) (*CryptoKoiBindingApproval, error) {
	event := new(CryptoKoiBindingApproval)
	if err := _CryptoKoiBinding.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CryptoKoiBindingApprovalForAllIterator is returned from FilterApprovalForAll and is used to iterate over the raw logs and unpacked data for ApprovalForAll events raised by the CryptoKoiBinding contract.
type CryptoKoiBindingApprovalForAllIterator struct {
	Event *CryptoKoiBindingApprovalForAll // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CryptoKoiBindingApprovalForAllIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CryptoKoiBindingApprovalForAll)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CryptoKoiBindingApprovalForAll)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CryptoKoiBindingApprovalForAllIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CryptoKoiBindingApprovalForAllIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CryptoKoiBindingApprovalForAll represents a ApprovalForAll event raised by the CryptoKoiBinding contract.
type CryptoKoiBindingApprovalForAll struct {
	Owner    common.Address
	Operator common.Address
	Approved bool
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApprovalForAll is a free log retrieval operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_CryptoKoiBinding *CryptoKoiBindingFilterer) FilterApprovalForAll(opts *bind.FilterOpts, owner []common.Address, operator []common.Address) (*CryptoKoiBindingApprovalForAllIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _CryptoKoiBinding.contract.FilterLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return &CryptoKoiBindingApprovalForAllIterator{contract: _CryptoKoiBinding.contract, event: "ApprovalForAll", logs: logs, sub: sub}, nil
}

// WatchApprovalForAll is a free log subscription operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_CryptoKoiBinding *CryptoKoiBindingFilterer) WatchApprovalForAll(opts *bind.WatchOpts, sink chan<- *CryptoKoiBindingApprovalForAll, owner []common.Address, operator []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _CryptoKoiBinding.contract.WatchLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CryptoKoiBindingApprovalForAll)
				if err := _CryptoKoiBinding.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApprovalForAll is a log parse operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_CryptoKoiBinding *CryptoKoiBindingFilterer) ParseApprovalForAll(log types.Log) (*CryptoKoiBindingApprovalForAll, error) {
	event := new(CryptoKoiBindingApprovalForAll)
	if err := _CryptoKoiBinding.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CryptoKoiBindingTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the CryptoKoiBinding contract.
type CryptoKoiBindingTransferIterator struct {
	Event *CryptoKoiBindingTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CryptoKoiBindingTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CryptoKoiBindingTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CryptoKoiBindingTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CryptoKoiBindingTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CryptoKoiBindingTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CryptoKoiBindingTransfer represents a Transfer event raised by the CryptoKoiBinding contract.
type CryptoKoiBindingTransfer struct {
	From    common.Address
	To      common.Address
	TokenId *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_CryptoKoiBinding *CryptoKoiBindingFilterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address, tokenId []*big.Int) (*CryptoKoiBindingTransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _CryptoKoiBinding.contract.FilterLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &CryptoKoiBindingTransferIterator{contract: _CryptoKoiBinding.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_CryptoKoiBinding *CryptoKoiBindingFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *CryptoKoiBindingTransfer, from []common.Address, to []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _CryptoKoiBinding.contract.WatchLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CryptoKoiBindingTransfer)
				if err := _CryptoKoiBinding.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_CryptoKoiBinding *CryptoKoiBindingFilterer) ParseTransfer(log types.Log) (*CryptoKoiBindingTransfer, error) {
	event := new(CryptoKoiBindingTransfer)
	if err := _CryptoKoiBinding.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
