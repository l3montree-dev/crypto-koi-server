// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package cryptokoi

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// CryptoKoiBindingMetaData contains all meta data concerning the CryptoKoiBinding contract.
var CryptoKoiBindingMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"p\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"killSwitch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"addresspayable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"redeem\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"p\",\"type\":\"uint256\"}],\"name\":\"setPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x60806040523480156200001157600080fd5b5060405162003fed38038062003fed833981810160405281019062000037919062000360565b8383816000908051906020019062000051929190620000d8565b5080600190805190602001906200006a929190620000d8565b50505033600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508160079080519060200190620000c6929190620000d8565b50806008819055505050505062000493565b828054620000e6906200045e565b90600052602060002090601f0160209004810192826200010a576000855562000156565b82601f106200012557805160ff191683800117855562000156565b8280016001018555821562000156579182015b828111156200015557825182559160200191906001019062000138565b5b50905062000165919062000169565b5090565b5b80821115620001845760008160009055506001016200016a565b5090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620001f182620001a6565b810181811067ffffffffffffffff82111715620002135762000212620001b7565b5b80604052505050565b60006200022862000188565b9050620002368282620001e6565b919050565b600067ffffffffffffffff821115620002595762000258620001b7565b5b6200026482620001a6565b9050602081019050919050565b60005b838110156200029157808201518184015260208101905062000274565b83811115620002a1576000848401525b50505050565b6000620002be620002b8846200023b565b6200021c565b905082815260208101848484011115620002dd57620002dc620001a1565b5b620002ea84828562000271565b509392505050565b600082601f8301126200030a57620003096200019c565b5b81516200031c848260208601620002a7565b91505092915050565b6000819050919050565b6200033a8162000325565b81146200034657600080fd5b50565b6000815190506200035a816200032f565b92915050565b600080600080608085870312156200037d576200037c62000192565b5b600085015167ffffffffffffffff8111156200039e576200039d62000197565b5b620003ac87828801620002f2565b945050602085015167ffffffffffffffff811115620003d057620003cf62000197565b5b620003de87828801620002f2565b935050604085015167ffffffffffffffff81111562000402576200040162000197565b5b6200041087828801620002f2565b9250506060620004238782880162000349565b91505092959194509250565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200047757607f821691505b6020821081036200048d576200048c6200042f565b5b50919050565b613b4a80620004a36000396000f3fe60806040526004361061011f5760003560e01c8063853828b6116100a0578063a22cb46511610064578063a22cb465146103c4578063ada14698146103ed578063b88d4fde14610404578063c87b56dd1461042d578063e985e9c51461046a5761011f565b8063853828b6146103035780638da5cb5b1461031a57806391b7f5ed1461034557806395d89b411461036e57806398d5fdca146103995761011f565b806323b872dd116100e757806323b872dd1461020e57806342842e0e1461023757806355f804b3146102605780636352211e1461028957806370a08231146102c65761011f565b806301ffc9a71461012457806306fdde0314610161578063081812fc1461018c578063095ea7b3146101c957806310badf4e146101f2575b600080fd5b34801561013057600080fd5b5061014b60048036038101906101469190612359565b6104a7565b60405161015891906123a1565b60405180910390f35b34801561016d57600080fd5b506101766104b9565b6040516101839190612455565b60405180910390f35b34801561019857600080fd5b506101b360048036038101906101ae91906124ad565b61054b565b6040516101c0919061251b565b60405180910390f35b3480156101d557600080fd5b506101f060048036038101906101eb9190612562565b6105d0565b005b61020c60048036038101906102079190612607565b6106e7565b005b34801561021a57600080fd5b506102356004803603810190610230919061267b565b6107d2565b005b34801561024357600080fd5b5061025e6004803603810190610259919061267b565b610832565b005b34801561026c57600080fd5b5061028760048036038101906102829190612724565b610852565b005b34801561029557600080fd5b506102b060048036038101906102ab91906124ad565b6108f8565b6040516102bd919061251b565b60405180910390f35b3480156102d257600080fd5b506102ed60048036038101906102e89190612771565b6109a9565b6040516102fa91906127ad565b60405180910390f35b34801561030f57600080fd5b50610318610a60565b005b34801561032657600080fd5b5061032f610c45565b60405161033c91906127e9565b60405180910390f35b34801561035157600080fd5b5061036c600480360381019061036791906124ad565b610c6b565b005b34801561037a57600080fd5b50610383610d05565b6040516103909190612455565b60405180910390f35b3480156103a557600080fd5b506103ae610d97565b6040516103bb91906127ad565b60405180910390f35b3480156103d057600080fd5b506103eb60048036038101906103e69190612830565b610da1565b005b3480156103f957600080fd5b50610402610db7565b005b34801561041057600080fd5b5061042b600480360381019061042691906129a0565b610e82565b005b34801561043957600080fd5b50610454600480360381019061044f91906124ad565b610ee4565b6040516104619190612455565b60405180910390f35b34801561047657600080fd5b50610491600480360381019061048c9190612a23565b610f8b565b60405161049e91906123a1565b60405180910390f35b60006104b28261101f565b9050919050565b6060600080546104c890612a92565b80601f01602080910402602001604051908101604052809291908181526020018280546104f490612a92565b80156105415780601f1061051657610100808354040283529160200191610541565b820191906000526020600020905b81548152906001019060200180831161052457829003601f168201915b5050505050905090565b600061055682611101565b610595576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161058c90612b35565b60405180910390fd5b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60006105db826108f8565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361064b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161064290612bc7565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1661066a61116d565b73ffffffffffffffffffffffffffffffffffffffff16148061069957506106988161069361116d565b610f8b565b5b6106d8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106cf90612c59565b60405180910390fd5b6106e28383611175565b505050565b60085434101561072c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161072390612cc5565b60405180910390fd5b610783610739858561122e565b83838080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050611269565b6107c2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107b990612d31565b60405180910390fd5b6107cc84846112cd565b50505050565b6107e36107dd61116d565b826112eb565b610822576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161081990612dc3565b60405180910390fd5b61082d8383836113c9565b505050565b61084d83838360405180602001604052806000815250610e82565b505050565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146108e2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108d990612e2f565b60405180910390fd5b8181600791906108f392919061224a565b505050565b6000806002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036109a0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161099790612ec1565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610a19576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a1090612f53565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610af0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ae790612e2f565b60405180910390fd5b60004790506000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1682604051610b3d90612fa4565b60006040518083038185875af1925050503d8060008114610b7a576040519150601f19603f3d011682016040523d82523d6000602084013e610b7f565b606091505b5050905080610bc3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bba90613005565b60405180910390fd5b81600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610cfb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cf290612e2f565b60405180910390fd5b8060088190555050565b606060018054610d1490612a92565b80601f0160208091040260200160405190810160405280929190818152602001828054610d4090612a92565b8015610d8d5780601f10610d6257610100808354040283529160200191610d8d565b820191906000526020600020905b815481529060010190602001808311610d7057829003601f168201915b5050505050905090565b6000600854905090565b610db3610dac61116d565b838361162f565b5050565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610e47576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e3e90612e2f565b60405180910390fd5b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16ff5b610e93610e8d61116d565b836112eb565b610ed2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ec990612dc3565b60405180910390fd5b610ede8484848461179b565b50505050565b6060610eef82611101565b610f2e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f2590613097565b60405180910390fd5b6000610f386117f7565b90506000815111610f585760405180602001604052806000815250610f83565b80610f6284611889565b604051602001610f739291906130f3565b6040516020818303038152906040525b915050919050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806110ea57507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806110fa57506110f9826119e9565b5b9050919050565b60008073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff166111e8836108f8565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60006112618284604051602001611246929190613180565b60405160208183030381529060405280519060200120611a53565b905092915050565b60006112758383611a83565b73ffffffffffffffffffffffffffffffffffffffff16600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614905092915050565b6112e7828260405180602001604052806000815250611aaa565b5050565b60006112f682611101565b611335576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161132c9061321e565b60405180910390fd5b6000611340836108f8565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614806113af57508373ffffffffffffffffffffffffffffffffffffffff166113978461054b565b73ffffffffffffffffffffffffffffffffffffffff16145b806113c057506113bf8185610f8b565b5b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff166113e9826108f8565b73ffffffffffffffffffffffffffffffffffffffff161461143f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611436906132b0565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036114ae576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114a590613342565b60405180910390fd5b6114b9838383611b05565b6114c4600082611175565b6001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546115149190613391565b925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461156b91906133c5565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a461162a838383611b0a565b505050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361169d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161169490613467565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c318360405161178e91906123a1565b60405180910390a3505050565b6117a68484846113c9565b6117b284848484611b0f565b6117f1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117e8906134f9565b60405180910390fd5b50505050565b60606007805461180690612a92565b80601f016020809104026020016040519081016040528092919081815260200182805461183290612a92565b801561187f5780601f106118545761010080835404028352916020019161187f565b820191906000526020600020905b81548152906001019060200180831161186257829003601f168201915b5050505050905090565b6060600082036118d0576040518060400160405280600181526020017f300000000000000000000000000000000000000000000000000000000000000081525090506119e4565b600082905060005b600082146119025780806118eb90613519565b915050600a826118fb9190613590565b91506118d8565b60008167ffffffffffffffff81111561191e5761191d612875565b5b6040519080825280601f01601f1916602001820160405280156119505781602001600182028036833780820191505090505b5090505b600085146119dd576001826119699190613391565b9150600a8561197891906135c1565b603061198491906133c5565b60f81b81838151811061199a576119996135f2565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a856119d69190613590565b9450611954565b8093505050505b919050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b600081604051602001611a669190613698565b604051602081830303815290604052805190602001209050919050565b6000806000611a928585611c96565b91509150611a9f81611d17565b819250505092915050565b611ab48383611ee3565b611ac16000848484611b0f565b611b00576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611af7906134f9565b60405180910390fd5b505050565b505050565b505050565b6000611b308473ffffffffffffffffffffffffffffffffffffffff166120bc565b15611c89578373ffffffffffffffffffffffffffffffffffffffff1663150b7a02611b5961116d565b8786866040518563ffffffff1660e01b8152600401611b7b9493929190613713565b6020604051808303816000875af1925050508015611bb757506040513d601f19601f82011682018060405250810190611bb49190613774565b60015b611c39573d8060008114611be7576040519150601f19603f3d011682016040523d82523d6000602084013e611bec565b606091505b506000815103611c31576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c28906134f9565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050611c8e565b600190505b949350505050565b6000806041835103611cd75760008060006020860151925060408601519150606086015160001a9050611ccb878285856120df565b94509450505050611d10565b6040835103611d07576000806020850151915060408501519050611cfc8683836121eb565b935093505050611d10565b60006002915091505b9250929050565b60006004811115611d2b57611d2a6137a1565b5b816004811115611d3e57611d3d6137a1565b5b0315611ee05760016004811115611d5857611d576137a1565b5b816004811115611d6b57611d6a6137a1565b5b03611dab576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611da29061381c565b60405180910390fd5b60026004811115611dbf57611dbe6137a1565b5b816004811115611dd257611dd16137a1565b5b03611e12576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e0990613888565b60405180910390fd5b60036004811115611e2657611e256137a1565b5b816004811115611e3957611e386137a1565b5b03611e79576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e709061391a565b60405180910390fd5b600480811115611e8c57611e8b6137a1565b5b816004811115611e9f57611e9e6137a1565b5b03611edf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ed6906139ac565b60405180910390fd5b5b50565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611f52576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f4990613a18565b60405180910390fd5b611f5b81611101565b15611f9b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f9290613a84565b60405180910390fd5b611fa760008383611b05565b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611ff791906133c5565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a46120b860008383611b0a565b5050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08360001c111561211a5760006003915091506121e2565b601b8560ff16141580156121325750601c8560ff1614155b156121445760006004915091506121e2565b6000600187878787604051600081526020016040526040516121699493929190613acf565b6020604051602081039080840390855afa15801561218b573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036121d9576000600192509250506121e2565b80600092509250505b94509492505050565b60008060007f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60001b841690506000601b60ff8660001c901c61222e91906133c5565b905061223c878288856120df565b935093505050935093915050565b82805461225690612a92565b90600052602060002090601f01602090048101928261227857600085556122bf565b82601f1061229157803560ff19168380011785556122bf565b828001600101855582156122bf579182015b828111156122be5782358255916020019190600101906122a3565b5b5090506122cc91906122d0565b5090565b5b808211156122e95760008160009055506001016122d1565b5090565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61233681612301565b811461234157600080fd5b50565b6000813590506123538161232d565b92915050565b60006020828403121561236f5761236e6122f7565b5b600061237d84828501612344565b91505092915050565b60008115159050919050565b61239b81612386565b82525050565b60006020820190506123b66000830184612392565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156123f65780820151818401526020810190506123db565b83811115612405576000848401525b50505050565b6000601f19601f8301169050919050565b6000612427826123bc565b61243181856123c7565b93506124418185602086016123d8565b61244a8161240b565b840191505092915050565b6000602082019050818103600083015261246f818461241c565b905092915050565b6000819050919050565b61248a81612477565b811461249557600080fd5b50565b6000813590506124a781612481565b92915050565b6000602082840312156124c3576124c26122f7565b5b60006124d184828501612498565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000612505826124da565b9050919050565b612515816124fa565b82525050565b6000602082019050612530600083018461250c565b92915050565b61253f816124fa565b811461254a57600080fd5b50565b60008135905061255c81612536565b92915050565b60008060408385031215612579576125786122f7565b5b60006125878582860161254d565b925050602061259885828601612498565b9150509250929050565b600080fd5b600080fd5b600080fd5b60008083601f8401126125c7576125c66125a2565b5b8235905067ffffffffffffffff8111156125e4576125e36125a7565b5b602083019150836001820283011115612600576125ff6125ac565b5b9250929050565b60008060008060608587031215612621576126206122f7565b5b600061262f8782880161254d565b945050602061264087828801612498565b935050604085013567ffffffffffffffff811115612661576126606122fc565b5b61266d878288016125b1565b925092505092959194509250565b600080600060608486031215612694576126936122f7565b5b60006126a28682870161254d565b93505060206126b38682870161254d565b92505060406126c486828701612498565b9150509250925092565b60008083601f8401126126e4576126e36125a2565b5b8235905067ffffffffffffffff811115612701576127006125a7565b5b60208301915083600182028301111561271d5761271c6125ac565b5b9250929050565b6000806020838503121561273b5761273a6122f7565b5b600083013567ffffffffffffffff811115612759576127586122fc565b5b612765858286016126ce565b92509250509250929050565b600060208284031215612787576127866122f7565b5b60006127958482850161254d565b91505092915050565b6127a781612477565b82525050565b60006020820190506127c2600083018461279e565b92915050565b60006127d3826124da565b9050919050565b6127e3816127c8565b82525050565b60006020820190506127fe60008301846127da565b92915050565b61280d81612386565b811461281857600080fd5b50565b60008135905061282a81612804565b92915050565b60008060408385031215612847576128466122f7565b5b60006128558582860161254d565b92505060206128668582860161281b565b9150509250929050565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6128ad8261240b565b810181811067ffffffffffffffff821117156128cc576128cb612875565b5b80604052505050565b60006128df6122ed565b90506128eb82826128a4565b919050565b600067ffffffffffffffff82111561290b5761290a612875565b5b6129148261240b565b9050602081019050919050565b82818337600083830152505050565b600061294361293e846128f0565b6128d5565b90508281526020810184848401111561295f5761295e612870565b5b61296a848285612921565b509392505050565b600082601f830112612987576129866125a2565b5b8135612997848260208601612930565b91505092915050565b600080600080608085870312156129ba576129b96122f7565b5b60006129c88782880161254d565b94505060206129d98782880161254d565b93505060406129ea87828801612498565b925050606085013567ffffffffffffffff811115612a0b57612a0a6122fc565b5b612a1787828801612972565b91505092959194509250565b60008060408385031215612a3a57612a396122f7565b5b6000612a488582860161254d565b9250506020612a598582860161254d565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680612aaa57607f821691505b602082108103612abd57612abc612a63565b5b50919050565b7f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b6000612b1f602c836123c7565b9150612b2a82612ac3565b604082019050919050565b60006020820190508181036000830152612b4e81612b12565b9050919050565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b6000612bb16021836123c7565b9150612bbc82612b55565b604082019050919050565b60006020820190508181036000830152612be081612ba4565b9050919050565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760008201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000602082015250565b6000612c436038836123c7565b9150612c4e82612be7565b604082019050919050565b60006020820190508181036000830152612c7281612c36565b9050919050565b7f496e73756666696369656e742066756e64730000000000000000000000000000600082015250565b6000612caf6012836123c7565b9150612cba82612c79565b602082019050919050565b60006020820190508181036000830152612cde81612ca2565b9050919050565b7f496e76616c6964207369676e6174757265000000000000000000000000000000600082015250565b6000612d1b6011836123c7565b9150612d2682612ce5565b602082019050919050565b60006020820190508181036000830152612d4a81612d0e565b9050919050565b7f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60008201527f776e6572206e6f7220617070726f766564000000000000000000000000000000602082015250565b6000612dad6031836123c7565b9150612db882612d51565b604082019050919050565b60006020820190508181036000830152612ddc81612da0565b9050919050565b7f4f776e65722070726976696c656765206f6e6c79000000000000000000000000600082015250565b6000612e196014836123c7565b9150612e2482612de3565b602082019050919050565b60006020820190508181036000830152612e4881612e0c565b9050919050565b7f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460008201527f656e7420746f6b656e0000000000000000000000000000000000000000000000602082015250565b6000612eab6029836123c7565b9150612eb682612e4f565b604082019050919050565b60006020820190508181036000830152612eda81612e9e565b9050919050565b7f4552433732313a2062616c616e636520717565727920666f7220746865207a6560008201527f726f206164647265737300000000000000000000000000000000000000000000602082015250565b6000612f3d602a836123c7565b9150612f4882612ee1565b604082019050919050565b60006020820190508181036000830152612f6c81612f30565b9050919050565b600081905092915050565b50565b6000612f8e600083612f73565b9150612f9982612f7e565b600082019050919050565b6000612faf82612f81565b9150819050919050565b7f7769746864726177416c6c3a205472616e73666572206661696c656400000000600082015250565b6000612fef601c836123c7565b9150612ffa82612fb9565b602082019050919050565b6000602082019050818103600083015261301e81612fe2565b9050919050565b7f4552433732314d657461646174613a2055524920717565727920666f72206e6f60008201527f6e6578697374656e7420746f6b656e0000000000000000000000000000000000602082015250565b6000613081602f836123c7565b915061308c82613025565b604082019050919050565b600060208201905081810360008301526130b081613074565b9050919050565b600081905092915050565b60006130cd826123bc565b6130d781856130b7565b93506130e78185602086016123d8565b80840191505092915050565b60006130ff82856130c2565b915061310b82846130c2565b91508190509392505050565b6000819050919050565b61313261312d82612477565b613117565b82525050565b60008160601b9050919050565b600061315082613138565b9050919050565b600061316282613145565b9050919050565b61317a613175826124fa565b613157565b82525050565b600061318c8285613121565b60208201915061319c8284613169565b6014820191508190509392505050565b7f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b6000613208602c836123c7565b9150613213826131ac565b604082019050919050565b60006020820190508181036000830152613237816131fb565b9050919050565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b600061329a6025836123c7565b91506132a58261323e565b604082019050919050565b600060208201905081810360008301526132c98161328d565b9050919050565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b600061332c6024836123c7565b9150613337826132d0565b604082019050919050565b6000602082019050818103600083015261335b8161331f565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061339c82612477565b91506133a783612477565b9250828210156133ba576133b9613362565b5b828203905092915050565b60006133d082612477565b91506133db83612477565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156134105761340f613362565b5b828201905092915050565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b60006134516019836123c7565b915061345c8261341b565b602082019050919050565b6000602082019050818103600083015261348081613444565b9050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b60006134e36032836123c7565b91506134ee82613487565b604082019050919050565b60006020820190508181036000830152613512816134d6565b9050919050565b600061352482612477565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361355657613555613362565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061359b82612477565b91506135a683612477565b9250826135b6576135b5613561565b5b828204905092915050565b60006135cc82612477565b91506135d783612477565b9250826135e7576135e6613561565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f19457468657265756d205369676e6564204d6573736167653a0a333200000000600082015250565b6000613657601c836130b7565b915061366282613621565b601c82019050919050565b6000819050919050565b6000819050919050565b61369261368d8261366d565b613677565b82525050565b60006136a38261364a565b91506136af8284613681565b60208201915081905092915050565b600081519050919050565b600082825260208201905092915050565b60006136e5826136be565b6136ef81856136c9565b93506136ff8185602086016123d8565b6137088161240b565b840191505092915050565b6000608082019050613728600083018761250c565b613735602083018661250c565b613742604083018561279e565b818103606083015261375481846136da565b905095945050505050565b60008151905061376e8161232d565b92915050565b60006020828403121561378a576137896122f7565b5b60006137988482850161375f565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f45434453413a20696e76616c6964207369676e61747572650000000000000000600082015250565b60006138066018836123c7565b9150613811826137d0565b602082019050919050565b60006020820190508181036000830152613835816137f9565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265206c656e67746800600082015250565b6000613872601f836123c7565b915061387d8261383c565b602082019050919050565b600060208201905081810360008301526138a181613865565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265202773272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b60006139046022836123c7565b915061390f826138a8565b604082019050919050565b60006020820190508181036000830152613933816138f7565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265202776272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b60006139966022836123c7565b91506139a18261393a565b604082019050919050565b600060208201905081810360008301526139c581613989565b9050919050565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b6000613a026020836123c7565b9150613a0d826139cc565b602082019050919050565b60006020820190508181036000830152613a31816139f5565b9050919050565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b6000613a6e601c836123c7565b9150613a7982613a38565b602082019050919050565b60006020820190508181036000830152613a9d81613a61565b9050919050565b613aad8161366d565b82525050565b600060ff82169050919050565b613ac981613ab3565b82525050565b6000608082019050613ae46000830187613aa4565b613af16020830186613ac0565b613afe6040830185613aa4565b613b0b6060830184613aa4565b9594505050505056fea26469706673582212208a0e59b525bfe187610c7829fe29bda6f426712f034d8b03fb35eb47a66368de64736f6c634300080d0033",
}

// CryptoKoiBindingABI is the input ABI used to generate the binding from.
// Deprecated: Use CryptoKoiBindingMetaData.ABI instead.
var CryptoKoiBindingABI = CryptoKoiBindingMetaData.ABI

// CryptoKoiBindingBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use CryptoKoiBindingMetaData.Bin instead.
var CryptoKoiBindingBin = CryptoKoiBindingMetaData.Bin

// DeployCryptoKoiBinding deploys a new Ethereum contract, binding an instance of CryptoKoiBinding to it.
func DeployCryptoKoiBinding(auth *bind.TransactOpts, backend bind.ContractBackend, name string, symbol string, uri string, p *big.Int) (common.Address, *types.Transaction, *CryptoKoiBinding, error) {
	parsed, err := CryptoKoiBindingMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(CryptoKoiBindingBin), backend, name, symbol, uri, p)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &CryptoKoiBinding{CryptoKoiBindingCaller: CryptoKoiBindingCaller{contract: contract}, CryptoKoiBindingTransactor: CryptoKoiBindingTransactor{contract: contract}, CryptoKoiBindingFilterer: CryptoKoiBindingFilterer{contract: contract}}, nil
}

// CryptoKoiBinding is an auto generated Go binding around an Ethereum contract.
type CryptoKoiBinding struct {
	CryptoKoiBindingCaller     // Read-only binding to the contract
	CryptoKoiBindingTransactor // Write-only binding to the contract
	CryptoKoiBindingFilterer   // Log filterer for contract events
}

// CryptoKoiBindingCaller is an auto generated read-only Go binding around an Ethereum contract.
type CryptoKoiBindingCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CryptoKoiBindingTransactor is an auto generated write-only Go binding around an Ethereum contract.
type CryptoKoiBindingTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CryptoKoiBindingFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type CryptoKoiBindingFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CryptoKoiBindingSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type CryptoKoiBindingSession struct {
	Contract     *CryptoKoiBinding // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// CryptoKoiBindingCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type CryptoKoiBindingCallerSession struct {
	Contract *CryptoKoiBindingCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts           // Call options to use throughout this session
}

// CryptoKoiBindingTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type CryptoKoiBindingTransactorSession struct {
	Contract     *CryptoKoiBindingTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts           // Transaction auth options to use throughout this session
}

// CryptoKoiBindingRaw is an auto generated low-level Go binding around an Ethereum contract.
type CryptoKoiBindingRaw struct {
	Contract *CryptoKoiBinding // Generic contract binding to access the raw methods on
}

// CryptoKoiBindingCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type CryptoKoiBindingCallerRaw struct {
	Contract *CryptoKoiBindingCaller // Generic read-only contract binding to access the raw methods on
}

// CryptoKoiBindingTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type CryptoKoiBindingTransactorRaw struct {
	Contract *CryptoKoiBindingTransactor // Generic write-only contract binding to access the raw methods on
}

// NewCryptoKoiBinding creates a new instance of CryptoKoiBinding, bound to a specific deployed contract.
func NewCryptoKoiBinding(address common.Address, backend bind.ContractBackend) (*CryptoKoiBinding, error) {
	contract, err := bindCryptoKoiBinding(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &CryptoKoiBinding{CryptoKoiBindingCaller: CryptoKoiBindingCaller{contract: contract}, CryptoKoiBindingTransactor: CryptoKoiBindingTransactor{contract: contract}, CryptoKoiBindingFilterer: CryptoKoiBindingFilterer{contract: contract}}, nil
}

// NewCryptoKoiBindingCaller creates a new read-only instance of CryptoKoiBinding, bound to a specific deployed contract.
func NewCryptoKoiBindingCaller(address common.Address, caller bind.ContractCaller) (*CryptoKoiBindingCaller, error) {
	contract, err := bindCryptoKoiBinding(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &CryptoKoiBindingCaller{contract: contract}, nil
}

// NewCryptoKoiBindingTransactor creates a new write-only instance of CryptoKoiBinding, bound to a specific deployed contract.
func NewCryptoKoiBindingTransactor(address common.Address, transactor bind.ContractTransactor) (*CryptoKoiBindingTransactor, error) {
	contract, err := bindCryptoKoiBinding(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &CryptoKoiBindingTransactor{contract: contract}, nil
}

// NewCryptoKoiBindingFilterer creates a new log filterer instance of CryptoKoiBinding, bound to a specific deployed contract.
func NewCryptoKoiBindingFilterer(address common.Address, filterer bind.ContractFilterer) (*CryptoKoiBindingFilterer, error) {
	contract, err := bindCryptoKoiBinding(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &CryptoKoiBindingFilterer{contract: contract}, nil
}

// bindCryptoKoiBinding binds a generic wrapper to an already deployed contract.
func bindCryptoKoiBinding(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(CryptoKoiBindingABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_CryptoKoiBinding *CryptoKoiBindingRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _CryptoKoiBinding.Contract.CryptoKoiBindingCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_CryptoKoiBinding *CryptoKoiBindingRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CryptoKoiBinding.Contract.CryptoKoiBindingTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_CryptoKoiBinding *CryptoKoiBindingRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _CryptoKoiBinding.Contract.CryptoKoiBindingTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_CryptoKoiBinding *CryptoKoiBindingCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _CryptoKoiBinding.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_CryptoKoiBinding *CryptoKoiBindingTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CryptoKoiBinding.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_CryptoKoiBinding *CryptoKoiBindingTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _CryptoKoiBinding.Contract.contract.Transact(opts, method, params...)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_CryptoKoiBinding *CryptoKoiBindingCaller) BalanceOf(opts *bind.CallOpts, owner common.Address) (*big.Int, error) {
	var out []interface{}
	err := _CryptoKoiBinding.contract.Call(opts, &out, "balanceOf", owner)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_CryptoKoiBinding *CryptoKoiBindingSession) BalanceOf(owner common.Address) (*big.Int, error) {
	return _CryptoKoiBinding.Contract.BalanceOf(&_CryptoKoiBinding.CallOpts, owner)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_CryptoKoiBinding *CryptoKoiBindingCallerSession) BalanceOf(owner common.Address) (*big.Int, error) {
	return _CryptoKoiBinding.Contract.BalanceOf(&_CryptoKoiBinding.CallOpts, owner)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_CryptoKoiBinding *CryptoKoiBindingCaller) GetApproved(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _CryptoKoiBinding.contract.Call(opts, &out, "getApproved", tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_CryptoKoiBinding *CryptoKoiBindingSession) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _CryptoKoiBinding.Contract.GetApproved(&_CryptoKoiBinding.CallOpts, tokenId)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_CryptoKoiBinding *CryptoKoiBindingCallerSession) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _CryptoKoiBinding.Contract.GetApproved(&_CryptoKoiBinding.CallOpts, tokenId)
}

// GetPrice is a free data retrieval call binding the contract method 0x98d5fdca.
//
// Solidity: function getPrice() view returns(uint256)
func (_CryptoKoiBinding *CryptoKoiBindingCaller) GetPrice(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _CryptoKoiBinding.contract.Call(opts, &out, "getPrice")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetPrice is a free data retrieval call binding the contract method 0x98d5fdca.
//
// Solidity: function getPrice() view returns(uint256)
func (_CryptoKoiBinding *CryptoKoiBindingSession) GetPrice() (*big.Int, error) {
	return _CryptoKoiBinding.Contract.GetPrice(&_CryptoKoiBinding.CallOpts)
}

// GetPrice is a free data retrieval call binding the contract method 0x98d5fdca.
//
// Solidity: function getPrice() view returns(uint256)
func (_CryptoKoiBinding *CryptoKoiBindingCallerSession) GetPrice() (*big.Int, error) {
	return _CryptoKoiBinding.Contract.GetPrice(&_CryptoKoiBinding.CallOpts)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_CryptoKoiBinding *CryptoKoiBindingCaller) IsApprovedForAll(opts *bind.CallOpts, owner common.Address, operator common.Address) (bool, error) {
	var out []interface{}
	err := _CryptoKoiBinding.contract.Call(opts, &out, "isApprovedForAll", owner, operator)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_CryptoKoiBinding *CryptoKoiBindingSession) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _CryptoKoiBinding.Contract.IsApprovedForAll(&_CryptoKoiBinding.CallOpts, owner, operator)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_CryptoKoiBinding *CryptoKoiBindingCallerSession) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _CryptoKoiBinding.Contract.IsApprovedForAll(&_CryptoKoiBinding.CallOpts, owner, operator)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_CryptoKoiBinding *CryptoKoiBindingCaller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _CryptoKoiBinding.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_CryptoKoiBinding *CryptoKoiBindingSession) Name() (string, error) {
	return _CryptoKoiBinding.Contract.Name(&_CryptoKoiBinding.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_CryptoKoiBinding *CryptoKoiBindingCallerSession) Name() (string, error) {
	return _CryptoKoiBinding.Contract.Name(&_CryptoKoiBinding.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_CryptoKoiBinding *CryptoKoiBindingCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _CryptoKoiBinding.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_CryptoKoiBinding *CryptoKoiBindingSession) Owner() (common.Address, error) {
	return _CryptoKoiBinding.Contract.Owner(&_CryptoKoiBinding.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_CryptoKoiBinding *CryptoKoiBindingCallerSession) Owner() (common.Address, error) {
	return _CryptoKoiBinding.Contract.Owner(&_CryptoKoiBinding.CallOpts)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_CryptoKoiBinding *CryptoKoiBindingCaller) OwnerOf(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _CryptoKoiBinding.contract.Call(opts, &out, "ownerOf", tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_CryptoKoiBinding *CryptoKoiBindingSession) OwnerOf(tokenId *big.Int) (common.Address, error) {
	return _CryptoKoiBinding.Contract.OwnerOf(&_CryptoKoiBinding.CallOpts, tokenId)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_CryptoKoiBinding *CryptoKoiBindingCallerSession) OwnerOf(tokenId *big.Int) (common.Address, error) {
	return _CryptoKoiBinding.Contract.OwnerOf(&_CryptoKoiBinding.CallOpts, tokenId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_CryptoKoiBinding *CryptoKoiBindingCaller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _CryptoKoiBinding.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_CryptoKoiBinding *CryptoKoiBindingSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _CryptoKoiBinding.Contract.SupportsInterface(&_CryptoKoiBinding.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_CryptoKoiBinding *CryptoKoiBindingCallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _CryptoKoiBinding.Contract.SupportsInterface(&_CryptoKoiBinding.CallOpts, interfaceId)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_CryptoKoiBinding *CryptoKoiBindingCaller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _CryptoKoiBinding.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_CryptoKoiBinding *CryptoKoiBindingSession) Symbol() (string, error) {
	return _CryptoKoiBinding.Contract.Symbol(&_CryptoKoiBinding.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_CryptoKoiBinding *CryptoKoiBindingCallerSession) Symbol() (string, error) {
	return _CryptoKoiBinding.Contract.Symbol(&_CryptoKoiBinding.CallOpts)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_CryptoKoiBinding *CryptoKoiBindingCaller) TokenURI(opts *bind.CallOpts, tokenId *big.Int) (string, error) {
	var out []interface{}
	err := _CryptoKoiBinding.contract.Call(opts, &out, "tokenURI", tokenId)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_CryptoKoiBinding *CryptoKoiBindingSession) TokenURI(tokenId *big.Int) (string, error) {
	return _CryptoKoiBinding.Contract.TokenURI(&_CryptoKoiBinding.CallOpts, tokenId)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_CryptoKoiBinding *CryptoKoiBindingCallerSession) TokenURI(tokenId *big.Int) (string, error) {
	return _CryptoKoiBinding.Contract.TokenURI(&_CryptoKoiBinding.CallOpts, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_CryptoKoiBinding *CryptoKoiBindingTransactor) Approve(opts *bind.TransactOpts, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _CryptoKoiBinding.contract.Transact(opts, "approve", to, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_CryptoKoiBinding *CryptoKoiBindingSession) Approve(to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _CryptoKoiBinding.Contract.Approve(&_CryptoKoiBinding.TransactOpts, to, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_CryptoKoiBinding *CryptoKoiBindingTransactorSession) Approve(to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _CryptoKoiBinding.Contract.Approve(&_CryptoKoiBinding.TransactOpts, to, tokenId)
}

// KillSwitch is a paid mutator transaction binding the contract method 0xada14698.
//
// Solidity: function killSwitch() returns()
func (_CryptoKoiBinding *CryptoKoiBindingTransactor) KillSwitch(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CryptoKoiBinding.contract.Transact(opts, "killSwitch")
}

// KillSwitch is a paid mutator transaction binding the contract method 0xada14698.
//
// Solidity: function killSwitch() returns()
func (_CryptoKoiBinding *CryptoKoiBindingSession) KillSwitch() (*types.Transaction, error) {
	return _CryptoKoiBinding.Contract.KillSwitch(&_CryptoKoiBinding.TransactOpts)
}

// KillSwitch is a paid mutator transaction binding the contract method 0xada14698.
//
// Solidity: function killSwitch() returns()
func (_CryptoKoiBinding *CryptoKoiBindingTransactorSession) KillSwitch() (*types.Transaction, error) {
	return _CryptoKoiBinding.Contract.KillSwitch(&_CryptoKoiBinding.TransactOpts)
}

// Redeem is a paid mutator transaction binding the contract method 0x10badf4e.
//
// Solidity: function redeem(address account, uint256 tokenId, bytes signature) payable returns()
func (_CryptoKoiBinding *CryptoKoiBindingTransactor) Redeem(opts *bind.TransactOpts, account common.Address, tokenId *big.Int, signature []byte) (*types.Transaction, error) {
	return _CryptoKoiBinding.contract.Transact(opts, "redeem", account, tokenId, signature)
}

// Redeem is a paid mutator transaction binding the contract method 0x10badf4e.
//
// Solidity: function redeem(address account, uint256 tokenId, bytes signature) payable returns()
func (_CryptoKoiBinding *CryptoKoiBindingSession) Redeem(account common.Address, tokenId *big.Int, signature []byte) (*types.Transaction, error) {
	return _CryptoKoiBinding.Contract.Redeem(&_CryptoKoiBinding.TransactOpts, account, tokenId, signature)
}

// Redeem is a paid mutator transaction binding the contract method 0x10badf4e.
//
// Solidity: function redeem(address account, uint256 tokenId, bytes signature) payable returns()
func (_CryptoKoiBinding *CryptoKoiBindingTransactorSession) Redeem(account common.Address, tokenId *big.Int, signature []byte) (*types.Transaction, error) {
	return _CryptoKoiBinding.Contract.Redeem(&_CryptoKoiBinding.TransactOpts, account, tokenId, signature)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_CryptoKoiBinding *CryptoKoiBindingTransactor) SafeTransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _CryptoKoiBinding.contract.Transact(opts, "safeTransferFrom", from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_CryptoKoiBinding *CryptoKoiBindingSession) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _CryptoKoiBinding.Contract.SafeTransferFrom(&_CryptoKoiBinding.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_CryptoKoiBinding *CryptoKoiBindingTransactorSession) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _CryptoKoiBinding.Contract.SafeTransferFrom(&_CryptoKoiBinding.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes _data) returns()
func (_CryptoKoiBinding *CryptoKoiBindingTransactor) SafeTransferFrom0(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int, _data []byte) (*types.Transaction, error) {
	return _CryptoKoiBinding.contract.Transact(opts, "safeTransferFrom0", from, to, tokenId, _data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes _data) returns()
func (_CryptoKoiBinding *CryptoKoiBindingSession) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, _data []byte) (*types.Transaction, error) {
	return _CryptoKoiBinding.Contract.SafeTransferFrom0(&_CryptoKoiBinding.TransactOpts, from, to, tokenId, _data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes _data) returns()
func (_CryptoKoiBinding *CryptoKoiBindingTransactorSession) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, _data []byte) (*types.Transaction, error) {
	return _CryptoKoiBinding.Contract.SafeTransferFrom0(&_CryptoKoiBinding.TransactOpts, from, to, tokenId, _data)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_CryptoKoiBinding *CryptoKoiBindingTransactor) SetApprovalForAll(opts *bind.TransactOpts, operator common.Address, approved bool) (*types.Transaction, error) {
	return _CryptoKoiBinding.contract.Transact(opts, "setApprovalForAll", operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_CryptoKoiBinding *CryptoKoiBindingSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _CryptoKoiBinding.Contract.SetApprovalForAll(&_CryptoKoiBinding.TransactOpts, operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_CryptoKoiBinding *CryptoKoiBindingTransactorSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _CryptoKoiBinding.Contract.SetApprovalForAll(&_CryptoKoiBinding.TransactOpts, operator, approved)
}

// SetBaseURI is a paid mutator transaction binding the contract method 0x55f804b3.
//
// Solidity: function setBaseURI(string uri) returns()
func (_CryptoKoiBinding *CryptoKoiBindingTransactor) SetBaseURI(opts *bind.TransactOpts, uri string) (*types.Transaction, error) {
	return _CryptoKoiBinding.contract.Transact(opts, "setBaseURI", uri)
}

// SetBaseURI is a paid mutator transaction binding the contract method 0x55f804b3.
//
// Solidity: function setBaseURI(string uri) returns()
func (_CryptoKoiBinding *CryptoKoiBindingSession) SetBaseURI(uri string) (*types.Transaction, error) {
	return _CryptoKoiBinding.Contract.SetBaseURI(&_CryptoKoiBinding.TransactOpts, uri)
}

// SetBaseURI is a paid mutator transaction binding the contract method 0x55f804b3.
//
// Solidity: function setBaseURI(string uri) returns()
func (_CryptoKoiBinding *CryptoKoiBindingTransactorSession) SetBaseURI(uri string) (*types.Transaction, error) {
	return _CryptoKoiBinding.Contract.SetBaseURI(&_CryptoKoiBinding.TransactOpts, uri)
}

// SetPrice is a paid mutator transaction binding the contract method 0x91b7f5ed.
//
// Solidity: function setPrice(uint256 p) returns()
func (_CryptoKoiBinding *CryptoKoiBindingTransactor) SetPrice(opts *bind.TransactOpts, p *big.Int) (*types.Transaction, error) {
	return _CryptoKoiBinding.contract.Transact(opts, "setPrice", p)
}

// SetPrice is a paid mutator transaction binding the contract method 0x91b7f5ed.
//
// Solidity: function setPrice(uint256 p) returns()
func (_CryptoKoiBinding *CryptoKoiBindingSession) SetPrice(p *big.Int) (*types.Transaction, error) {
	return _CryptoKoiBinding.Contract.SetPrice(&_CryptoKoiBinding.TransactOpts, p)
}

// SetPrice is a paid mutator transaction binding the contract method 0x91b7f5ed.
//
// Solidity: function setPrice(uint256 p) returns()
func (_CryptoKoiBinding *CryptoKoiBindingTransactorSession) SetPrice(p *big.Int) (*types.Transaction, error) {
	return _CryptoKoiBinding.Contract.SetPrice(&_CryptoKoiBinding.TransactOpts, p)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_CryptoKoiBinding *CryptoKoiBindingTransactor) TransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _CryptoKoiBinding.contract.Transact(opts, "transferFrom", from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_CryptoKoiBinding *CryptoKoiBindingSession) TransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _CryptoKoiBinding.Contract.TransferFrom(&_CryptoKoiBinding.TransactOpts, from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_CryptoKoiBinding *CryptoKoiBindingTransactorSession) TransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _CryptoKoiBinding.Contract.TransferFrom(&_CryptoKoiBinding.TransactOpts, from, to, tokenId)
}

// WithdrawAll is a paid mutator transaction binding the contract method 0x853828b6.
//
// Solidity: function withdrawAll() returns()
func (_CryptoKoiBinding *CryptoKoiBindingTransactor) WithdrawAll(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CryptoKoiBinding.contract.Transact(opts, "withdrawAll")
}

// WithdrawAll is a paid mutator transaction binding the contract method 0x853828b6.
//
// Solidity: function withdrawAll() returns()
func (_CryptoKoiBinding *CryptoKoiBindingSession) WithdrawAll() (*types.Transaction, error) {
	return _CryptoKoiBinding.Contract.WithdrawAll(&_CryptoKoiBinding.TransactOpts)
}

// WithdrawAll is a paid mutator transaction binding the contract method 0x853828b6.
//
// Solidity: function withdrawAll() returns()
func (_CryptoKoiBinding *CryptoKoiBindingTransactorSession) WithdrawAll() (*types.Transaction, error) {
	return _CryptoKoiBinding.Contract.WithdrawAll(&_CryptoKoiBinding.TransactOpts)
}

// CryptoKoiBindingApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the CryptoKoiBinding contract.
type CryptoKoiBindingApprovalIterator struct {
	Event *CryptoKoiBindingApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CryptoKoiBindingApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CryptoKoiBindingApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CryptoKoiBindingApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CryptoKoiBindingApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CryptoKoiBindingApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CryptoKoiBindingApproval represents a Approval event raised by the CryptoKoiBinding contract.
type CryptoKoiBindingApproval struct {
	Owner    common.Address
	Approved common.Address
	TokenId  *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_CryptoKoiBinding *CryptoKoiBindingFilterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, approved []common.Address, tokenId []*big.Int) (*CryptoKoiBindingApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _CryptoKoiBinding.contract.FilterLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &CryptoKoiBindingApprovalIterator{contract: _CryptoKoiBinding.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_CryptoKoiBinding *CryptoKoiBindingFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *CryptoKoiBindingApproval, owner []common.Address, approved []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _CryptoKoiBinding.contract.WatchLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CryptoKoiBindingApproval)
				if err := _CryptoKoiBinding.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_CryptoKoiBinding *CryptoKoiBindingFilterer) ParseApproval(log types.Log) (*CryptoKoiBindingApproval, error) {
	event := new(CryptoKoiBindingApproval)
	if err := _CryptoKoiBinding.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CryptoKoiBindingApprovalForAllIterator is returned from FilterApprovalForAll and is used to iterate over the raw logs and unpacked data for ApprovalForAll events raised by the CryptoKoiBinding contract.
type CryptoKoiBindingApprovalForAllIterator struct {
	Event *CryptoKoiBindingApprovalForAll // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CryptoKoiBindingApprovalForAllIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CryptoKoiBindingApprovalForAll)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CryptoKoiBindingApprovalForAll)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CryptoKoiBindingApprovalForAllIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CryptoKoiBindingApprovalForAllIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CryptoKoiBindingApprovalForAll represents a ApprovalForAll event raised by the CryptoKoiBinding contract.
type CryptoKoiBindingApprovalForAll struct {
	Owner    common.Address
	Operator common.Address
	Approved bool
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApprovalForAll is a free log retrieval operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_CryptoKoiBinding *CryptoKoiBindingFilterer) FilterApprovalForAll(opts *bind.FilterOpts, owner []common.Address, operator []common.Address) (*CryptoKoiBindingApprovalForAllIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _CryptoKoiBinding.contract.FilterLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return &CryptoKoiBindingApprovalForAllIterator{contract: _CryptoKoiBinding.contract, event: "ApprovalForAll", logs: logs, sub: sub}, nil
}

// WatchApprovalForAll is a free log subscription operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_CryptoKoiBinding *CryptoKoiBindingFilterer) WatchApprovalForAll(opts *bind.WatchOpts, sink chan<- *CryptoKoiBindingApprovalForAll, owner []common.Address, operator []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _CryptoKoiBinding.contract.WatchLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CryptoKoiBindingApprovalForAll)
				if err := _CryptoKoiBinding.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApprovalForAll is a log parse operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_CryptoKoiBinding *CryptoKoiBindingFilterer) ParseApprovalForAll(log types.Log) (*CryptoKoiBindingApprovalForAll, error) {
	event := new(CryptoKoiBindingApprovalForAll)
	if err := _CryptoKoiBinding.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CryptoKoiBindingTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the CryptoKoiBinding contract.
type CryptoKoiBindingTransferIterator struct {
	Event *CryptoKoiBindingTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CryptoKoiBindingTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CryptoKoiBindingTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CryptoKoiBindingTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CryptoKoiBindingTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CryptoKoiBindingTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CryptoKoiBindingTransfer represents a Transfer event raised by the CryptoKoiBinding contract.
type CryptoKoiBindingTransfer struct {
	From    common.Address
	To      common.Address
	TokenId *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_CryptoKoiBinding *CryptoKoiBindingFilterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address, tokenId []*big.Int) (*CryptoKoiBindingTransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _CryptoKoiBinding.contract.FilterLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &CryptoKoiBindingTransferIterator{contract: _CryptoKoiBinding.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_CryptoKoiBinding *CryptoKoiBindingFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *CryptoKoiBindingTransfer, from []common.Address, to []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _CryptoKoiBinding.contract.WatchLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CryptoKoiBindingTransfer)
				if err := _CryptoKoiBinding.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_CryptoKoiBinding *CryptoKoiBindingFilterer) ParseTransfer(log types.Log) (*CryptoKoiBindingTransfer, error) {
	event := new(CryptoKoiBindingTransfer)
	if err := _CryptoKoiBinding.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
