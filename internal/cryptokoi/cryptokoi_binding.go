// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package cryptokoi

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// CryptoKoiBindingMetaData contains all meta data concerning the CryptoKoiBinding contract.
var CryptoKoiBindingMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"redeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x60806040523480156200001157600080fd5b506040516200419d3803806200419d833981810160405281019062000037919062000461565b818181600090805190602001906200005192919062000214565b5080600190805190602001906200006a92919062000214565b505050620000916000801b620000856200009960201b60201c565b620000a160201b60201c565b50506200054b565b600033905090565b620000b38282620000b760201b60201c565b5050565b620000c98282620001a960201b60201c565b620001a55760016006600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506200014a6200009960201b60201c565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b60006006600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b828054620002229062000515565b90600052602060002090601f01602090048101928262000246576000855562000292565b82601f106200026157805160ff191683800117855562000292565b8280016001018555821562000292579182015b828111156200029157825182559160200191906001019062000274565b5b509050620002a19190620002a5565b5090565b5b80821115620002c0576000816000905550600101620002a6565b5090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6200032d82620002e2565b810181811067ffffffffffffffff821117156200034f576200034e620002f3565b5b80604052505050565b600062000364620002c4565b905062000372828262000322565b919050565b600067ffffffffffffffff821115620003955762000394620002f3565b5b620003a082620002e2565b9050602081019050919050565b60005b83811015620003cd578082015181840152602081019050620003b0565b83811115620003dd576000848401525b50505050565b6000620003fa620003f48462000377565b62000358565b905082815260208101848484011115620004195762000418620002dd565b5b62000426848285620003ad565b509392505050565b600082601f830112620004465762000445620002d8565b5b815162000458848260208601620003e3565b91505092915050565b600080604083850312156200047b576200047a620002ce565b5b600083015167ffffffffffffffff8111156200049c576200049b620002d3565b5b620004aa858286016200042e565b925050602083015167ffffffffffffffff811115620004ce57620004cd620002d3565b5b620004dc858286016200042e565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200052e57607f821691505b60208210811415620005455762000544620004e6565b5b50919050565b613c42806200055b6000396000f3fe608060405234801561001057600080fd5b506004361061012c5760003560e01c80636352211e116100ad578063a22cb46511610071578063a22cb46514610353578063b88d4fde1461036f578063c87b56dd1461038b578063d547741f146103bb578063e985e9c5146103d75761012c565b80636352211e1461028757806370a08231146102b757806391d14854146102e757806395d89b4114610317578063a217fddf146103355761012c565b806323b872dd116100f457806323b872dd146101e7578063248a9ca3146102035780632f2ff15d1461023357806336568abe1461024f57806342842e0e1461026b5761012c565b806301ffc9a71461013157806306fdde0314610161578063081812fc1461017f578063095ea7b3146101af57806310badf4e146101cb575b600080fd5b61014b6004803603810190610146919061238c565b610407565b60405161015891906123d4565b60405180910390f35b610169610419565b6040516101769190612488565b60405180910390f35b610199600480360381019061019491906124e0565b6104ab565b6040516101a6919061254e565b60405180910390f35b6101c960048036038101906101c49190612595565b610530565b005b6101e560048036038101906101e0919061263a565b610648565b005b61020160048036038101906101fc91906126ae565b6106ee565b005b61021d60048036038101906102189190612737565b61074e565b60405161022a9190612773565b60405180910390f35b61024d6004803603810190610248919061278e565b61076e565b005b6102696004803603810190610264919061278e565b610797565b005b610285600480360381019061028091906126ae565b61081a565b005b6102a1600480360381019061029c91906124e0565b61083a565b6040516102ae919061254e565b60405180910390f35b6102d160048036038101906102cc91906127ce565b6108ec565b6040516102de919061280a565b60405180910390f35b61030160048036038101906102fc919061278e565b6109a4565b60405161030e91906123d4565b60405180910390f35b61031f610a0f565b60405161032c9190612488565b60405180910390f35b61033d610aa1565b60405161034a9190612773565b60405180910390f35b61036d60048036038101906103689190612851565b610aa8565b005b610389600480360381019061038491906129c1565b610abe565b005b6103a560048036038101906103a091906124e0565b610b20565b6040516103b29190612488565b60405180910390f35b6103d560048036038101906103d0919061278e565b610bc7565b005b6103f160048036038101906103ec9190612a44565b610bf0565b6040516103fe91906123d4565b60405180910390f35b600061041282610c84565b9050919050565b60606000805461042890612ab3565b80601f016020809104026020016040519081016040528092919081815260200182805461045490612ab3565b80156104a15780601f10610476576101008083540402835291602001916104a1565b820191906000526020600020905b81548152906001019060200180831161048457829003601f168201915b5050505050905090565b60006104b682610cfe565b6104f5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104ec90612b57565b60405180910390fd5b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600061053b8261083a565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156105ac576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105a390612be9565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166105cb610d6a565b73ffffffffffffffffffffffffffffffffffffffff1614806105fa57506105f9816105f4610d6a565b610bf0565b5b610639576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161063090612c7b565b60405180910390fd5b6106438383610d72565b505050565b61069f6106558585610e2b565b83838080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050610e66565b6106de576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106d590612ce7565b60405180910390fd5b6106e88484610e86565b50505050565b6106ff6106f9610d6a565b82610ea4565b61073e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161073590612d79565b60405180910390fd5b610749838383610f82565b505050565b600060066000838152602001908152602001600020600101549050919050565b6107778261074e565b61078881610783610d6a565b6111e9565b6107928383611286565b505050565b61079f610d6a565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461080c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161080390612e0b565b60405180910390fd5b6108168282611367565b5050565b61083583838360405180602001604052806000815250610abe565b505050565b6000806002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156108e3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108da90612e9d565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561095d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161095490612f2f565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60006006600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b606060018054610a1e90612ab3565b80601f0160208091040260200160405190810160405280929190818152602001828054610a4a90612ab3565b8015610a975780601f10610a6c57610100808354040283529160200191610a97565b820191906000526020600020905b815481529060010190602001808311610a7a57829003601f168201915b5050505050905090565b6000801b81565b610aba610ab3610d6a565b8383611449565b5050565b610acf610ac9610d6a565b83610ea4565b610b0e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b0590612d79565b60405180910390fd5b610b1a848484846115b6565b50505050565b6060610b2b82610cfe565b610b6a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b6190612fc1565b60405180910390fd5b6000610b74611612565b90506000815111610b945760405180602001604052806000815250610bbf565b80610b9e84611632565b604051602001610baf92919061301d565b6040516020818303038152906040525b915050919050565b610bd08261074e565b610be181610bdc610d6a565b6111e9565b610beb8383611367565b505050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60007f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480610cf75750610cf682611793565b5b9050919050565b60008073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16610de58361083a565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000610e5e8284604051602001610e439291906130aa565b60405160208183030381529060405280519060200120611875565b905092915050565b6000610e7e6000801b610e7985856118a5565b6109a4565b905092915050565b610ea08282604051806020016040528060008152506118cc565b5050565b6000610eaf82610cfe565b610eee576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ee590613148565b60405180910390fd5b6000610ef98361083a565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480610f6857508373ffffffffffffffffffffffffffffffffffffffff16610f50846104ab565b73ffffffffffffffffffffffffffffffffffffffff16145b80610f795750610f788185610bf0565b5b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff16610fa28261083a565b73ffffffffffffffffffffffffffffffffffffffff1614610ff8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fef906131da565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611068576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161105f9061326c565b60405180910390fd5b611073838383611927565b61107e600082610d72565b6001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546110ce91906132bb565b925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461112591906132ef565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a46111e483838361192c565b505050565b6111f382826109a4565b611282576112188173ffffffffffffffffffffffffffffffffffffffff166014611931565b6112268360001c6020611931565b6040516020016112379291906133dd565b6040516020818303038152906040526040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112799190612488565b60405180910390fd5b5050565b61129082826109a4565b6113635760016006600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550611308610d6a565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b61137182826109a4565b156114455760006006600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506113ea610d6a565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45b5050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156114b8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114af90613463565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516115a991906123d4565b60405180910390a3505050565b6115c1848484610f82565b6115cd84848484611b6d565b61160c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611603906134f5565b60405180910390fd5b50505050565b6060604051806060016040528060248152602001613be960249139905090565b6060600082141561167a576040518060400160405280600181526020017f3000000000000000000000000000000000000000000000000000000000000000815250905061178e565b600082905060005b600082146116ac57808061169590613515565b915050600a826116a5919061358d565b9150611682565b60008167ffffffffffffffff8111156116c8576116c7612896565b5b6040519080825280601f01601f1916602001820160405280156116fa5781602001600182028036833780820191505090505b5090505b600085146117875760018261171391906132bb565b9150600a8561172291906135be565b603061172e91906132ef565b60f81b818381518110611744576117436135ef565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a85611780919061358d565b94506116fe565b8093505050505b919050565b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061185e57507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b8061186e575061186d82611cf5565b5b9050919050565b600081604051602001611888919061368b565b604051602081830303815290604052805190602001209050919050565b60008060006118b48585611d5f565b915091506118c181611de2565b819250505092915050565b6118d68383611fb7565b6118e36000848484611b6d565b611922576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611919906134f5565b60405180910390fd5b505050565b505050565b505050565b60606000600283600261194491906136b1565b61194e91906132ef565b67ffffffffffffffff81111561196757611966612896565b5b6040519080825280601f01601f1916602001820160405280156119995781602001600182028036833780820191505090505b5090507f3000000000000000000000000000000000000000000000000000000000000000816000815181106119d1576119d06135ef565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110611a3557611a346135ef565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060006001846002611a7591906136b1565b611a7f91906132ef565b90505b6001811115611b1f577f3031323334353637383961626364656600000000000000000000000000000000600f861660108110611ac157611ac06135ef565b5b1a60f81b828281518110611ad857611ad76135ef565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c945080611b189061370b565b9050611a82565b5060008414611b63576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b5a90613781565b60405180910390fd5b8091505092915050565b6000611b8e8473ffffffffffffffffffffffffffffffffffffffff16612191565b15611ce8578373ffffffffffffffffffffffffffffffffffffffff1663150b7a02611bb7610d6a565b8786866040518563ffffffff1660e01b8152600401611bd994939291906137f6565b6020604051808303816000875af1925050508015611c1557506040513d601f19601f82011682018060405250810190611c129190613857565b60015b611c98573d8060008114611c45576040519150601f19603f3d011682016040523d82523d6000602084013e611c4a565b606091505b50600081511415611c90576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c87906134f5565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050611ced565b600190505b949350505050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b600080604183511415611da15760008060006020860151925060408601519150606086015160001a9050611d95878285856121b4565b94509450505050611ddb565b604083511415611dd2576000806020850151915060408501519050611dc78683836122c1565b935093505050611ddb565b60006002915091505b9250929050565b60006004811115611df657611df5613884565b5b816004811115611e0957611e08613884565b5b1415611e1457611fb4565b60016004811115611e2857611e27613884565b5b816004811115611e3b57611e3a613884565b5b1415611e7c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e73906138ff565b60405180910390fd5b60026004811115611e9057611e8f613884565b5b816004811115611ea357611ea2613884565b5b1415611ee4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611edb9061396b565b60405180910390fd5b60036004811115611ef857611ef7613884565b5b816004811115611f0b57611f0a613884565b5b1415611f4c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f43906139fd565b60405180910390fd5b600480811115611f5f57611f5e613884565b5b816004811115611f7257611f71613884565b5b1415611fb3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611faa90613a8f565b60405180910390fd5b5b50565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415612027576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161201e90613afb565b60405180910390fd5b61203081610cfe565b15612070576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161206790613b67565b60405180910390fd5b61207c60008383611927565b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546120cc91906132ef565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a461218d6000838361192c565b5050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08360001c11156121ef5760006003915091506122b8565b601b8560ff16141580156122075750601c8560ff1614155b156122195760006004915091506122b8565b60006001878787876040516000815260200160405260405161223e9493929190613ba3565b6020604051602081039080840390855afa158015612260573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156122af576000600192509250506122b8565b80600092509250505b94509492505050565b60008060007f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60001b841690506000601b60ff8660001c901c61230491906132ef565b9050612312878288856121b4565b935093505050935093915050565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61236981612334565b811461237457600080fd5b50565b60008135905061238681612360565b92915050565b6000602082840312156123a2576123a161232a565b5b60006123b084828501612377565b91505092915050565b60008115159050919050565b6123ce816123b9565b82525050565b60006020820190506123e960008301846123c5565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561242957808201518184015260208101905061240e565b83811115612438576000848401525b50505050565b6000601f19601f8301169050919050565b600061245a826123ef565b61246481856123fa565b935061247481856020860161240b565b61247d8161243e565b840191505092915050565b600060208201905081810360008301526124a2818461244f565b905092915050565b6000819050919050565b6124bd816124aa565b81146124c857600080fd5b50565b6000813590506124da816124b4565b92915050565b6000602082840312156124f6576124f561232a565b5b6000612504848285016124cb565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006125388261250d565b9050919050565b6125488161252d565b82525050565b6000602082019050612563600083018461253f565b92915050565b6125728161252d565b811461257d57600080fd5b50565b60008135905061258f81612569565b92915050565b600080604083850312156125ac576125ab61232a565b5b60006125ba85828601612580565b92505060206125cb858286016124cb565b9150509250929050565b600080fd5b600080fd5b600080fd5b60008083601f8401126125fa576125f96125d5565b5b8235905067ffffffffffffffff811115612617576126166125da565b5b602083019150836001820283011115612633576126326125df565b5b9250929050565b600080600080606085870312156126545761265361232a565b5b600061266287828801612580565b9450506020612673878288016124cb565b935050604085013567ffffffffffffffff8111156126945761269361232f565b5b6126a0878288016125e4565b925092505092959194509250565b6000806000606084860312156126c7576126c661232a565b5b60006126d586828701612580565b93505060206126e686828701612580565b92505060406126f7868287016124cb565b9150509250925092565b6000819050919050565b61271481612701565b811461271f57600080fd5b50565b6000813590506127318161270b565b92915050565b60006020828403121561274d5761274c61232a565b5b600061275b84828501612722565b91505092915050565b61276d81612701565b82525050565b60006020820190506127886000830184612764565b92915050565b600080604083850312156127a5576127a461232a565b5b60006127b385828601612722565b92505060206127c485828601612580565b9150509250929050565b6000602082840312156127e4576127e361232a565b5b60006127f284828501612580565b91505092915050565b612804816124aa565b82525050565b600060208201905061281f60008301846127fb565b92915050565b61282e816123b9565b811461283957600080fd5b50565b60008135905061284b81612825565b92915050565b600080604083850312156128685761286761232a565b5b600061287685828601612580565b92505060206128878582860161283c565b9150509250929050565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6128ce8261243e565b810181811067ffffffffffffffff821117156128ed576128ec612896565b5b80604052505050565b6000612900612320565b905061290c82826128c5565b919050565b600067ffffffffffffffff82111561292c5761292b612896565b5b6129358261243e565b9050602081019050919050565b82818337600083830152505050565b600061296461295f84612911565b6128f6565b9050828152602081018484840111156129805761297f612891565b5b61298b848285612942565b509392505050565b600082601f8301126129a8576129a76125d5565b5b81356129b8848260208601612951565b91505092915050565b600080600080608085870312156129db576129da61232a565b5b60006129e987828801612580565b94505060206129fa87828801612580565b9350506040612a0b878288016124cb565b925050606085013567ffffffffffffffff811115612a2c57612a2b61232f565b5b612a3887828801612993565b91505092959194509250565b60008060408385031215612a5b57612a5a61232a565b5b6000612a6985828601612580565b9250506020612a7a85828601612580565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680612acb57607f821691505b60208210811415612adf57612ade612a84565b5b50919050565b7f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b6000612b41602c836123fa565b9150612b4c82612ae5565b604082019050919050565b60006020820190508181036000830152612b7081612b34565b9050919050565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b6000612bd36021836123fa565b9150612bde82612b77565b604082019050919050565b60006020820190508181036000830152612c0281612bc6565b9050919050565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760008201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000602082015250565b6000612c656038836123fa565b9150612c7082612c09565b604082019050919050565b60006020820190508181036000830152612c9481612c58565b9050919050565b7f496e76616c6964207369676e6174757265000000000000000000000000000000600082015250565b6000612cd16011836123fa565b9150612cdc82612c9b565b602082019050919050565b60006020820190508181036000830152612d0081612cc4565b9050919050565b7f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60008201527f776e6572206e6f7220617070726f766564000000000000000000000000000000602082015250565b6000612d636031836123fa565b9150612d6e82612d07565b604082019050919050565b60006020820190508181036000830152612d9281612d56565b9050919050565b7f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560008201527f20726f6c657320666f722073656c660000000000000000000000000000000000602082015250565b6000612df5602f836123fa565b9150612e0082612d99565b604082019050919050565b60006020820190508181036000830152612e2481612de8565b9050919050565b7f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460008201527f656e7420746f6b656e0000000000000000000000000000000000000000000000602082015250565b6000612e876029836123fa565b9150612e9282612e2b565b604082019050919050565b60006020820190508181036000830152612eb681612e7a565b9050919050565b7f4552433732313a2062616c616e636520717565727920666f7220746865207a6560008201527f726f206164647265737300000000000000000000000000000000000000000000602082015250565b6000612f19602a836123fa565b9150612f2482612ebd565b604082019050919050565b60006020820190508181036000830152612f4881612f0c565b9050919050565b7f4552433732314d657461646174613a2055524920717565727920666f72206e6f60008201527f6e6578697374656e7420746f6b656e0000000000000000000000000000000000602082015250565b6000612fab602f836123fa565b9150612fb682612f4f565b604082019050919050565b60006020820190508181036000830152612fda81612f9e565b9050919050565b600081905092915050565b6000612ff7826123ef565b6130018185612fe1565b935061301181856020860161240b565b80840191505092915050565b60006130298285612fec565b91506130358284612fec565b91508190509392505050565b6000819050919050565b61305c613057826124aa565b613041565b82525050565b60008160601b9050919050565b600061307a82613062565b9050919050565b600061308c8261306f565b9050919050565b6130a461309f8261252d565b613081565b82525050565b60006130b6828561304b565b6020820191506130c68284613093565b6014820191508190509392505050565b7f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b6000613132602c836123fa565b915061313d826130d6565b604082019050919050565b6000602082019050818103600083015261316181613125565b9050919050565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b60006131c46025836123fa565b91506131cf82613168565b604082019050919050565b600060208201905081810360008301526131f3816131b7565b9050919050565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b60006132566024836123fa565b9150613261826131fa565b604082019050919050565b6000602082019050818103600083015261328581613249565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006132c6826124aa565b91506132d1836124aa565b9250828210156132e4576132e361328c565b5b828203905092915050565b60006132fa826124aa565b9150613305836124aa565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561333a5761333961328c565b5b828201905092915050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000600082015250565b600061337b601783612fe1565b915061338682613345565b601782019050919050565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000600082015250565b60006133c7601183612fe1565b91506133d282613391565b601182019050919050565b60006133e88261336e565b91506133f48285612fec565b91506133ff826133ba565b915061340b8284612fec565b91508190509392505050565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b600061344d6019836123fa565b915061345882613417565b602082019050919050565b6000602082019050818103600083015261347c81613440565b9050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b60006134df6032836123fa565b91506134ea82613483565b604082019050919050565b6000602082019050818103600083015261350e816134d2565b9050919050565b6000613520826124aa565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156135535761355261328c565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000613598826124aa565b91506135a3836124aa565b9250826135b3576135b261355e565b5b828204905092915050565b60006135c9826124aa565b91506135d4836124aa565b9250826135e4576135e361355e565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f19457468657265756d205369676e6564204d6573736167653a0a333200000000600082015250565b6000613654601c83612fe1565b915061365f8261361e565b601c82019050919050565b6000819050919050565b61368561368082612701565b61366a565b82525050565b600061369682613647565b91506136a28284613674565b60208201915081905092915050565b60006136bc826124aa565b91506136c7836124aa565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615613700576136ff61328c565b5b828202905092915050565b6000613716826124aa565b9150600082141561372a5761372961328c565b5b600182039050919050565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b600061376b6020836123fa565b915061377682613735565b602082019050919050565b6000602082019050818103600083015261379a8161375e565b9050919050565b600081519050919050565b600082825260208201905092915050565b60006137c8826137a1565b6137d281856137ac565b93506137e281856020860161240b565b6137eb8161243e565b840191505092915050565b600060808201905061380b600083018761253f565b613818602083018661253f565b61382560408301856127fb565b818103606083015261383781846137bd565b905095945050505050565b60008151905061385181612360565b92915050565b60006020828403121561386d5761386c61232a565b5b600061387b84828501613842565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f45434453413a20696e76616c6964207369676e61747572650000000000000000600082015250565b60006138e96018836123fa565b91506138f4826138b3565b602082019050919050565b60006020820190508181036000830152613918816138dc565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265206c656e67746800600082015250565b6000613955601f836123fa565b91506139608261391f565b602082019050919050565b6000602082019050818103600083015261398481613948565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265202773272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b60006139e76022836123fa565b91506139f28261398b565b604082019050919050565b60006020820190508181036000830152613a16816139da565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265202776272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b6000613a796022836123fa565b9150613a8482613a1d565b604082019050919050565b60006020820190508181036000830152613aa881613a6c565b9050919050565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b6000613ae56020836123fa565b9150613af082613aaf565b602082019050919050565b60006020820190508181036000830152613b1481613ad8565b9050919050565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b6000613b51601c836123fa565b9150613b5c82613b1b565b602082019050919050565b60006020820190508181036000830152613b8081613b44565b9050919050565b600060ff82169050919050565b613b9d81613b87565b82525050565b6000608082019050613bb86000830187612764565b613bc56020830186613b94565b613bd26040830185612764565b613bdf6060830184612764565b9594505050505056fe68747470733a2f2f6170692e63727970746f2d6b6f692e696f2f76312f746f6b656e732fa26469706673582212205b3b1f7b9ee127702d4081c1388b0ce44afc137e00d9af09872f2f238b3741c164736f6c634300080c0033",
}

// CryptoKoiBindingABI is the input ABI used to generate the binding from.
// Deprecated: Use CryptoKoiBindingMetaData.ABI instead.
var CryptoKoiBindingABI = CryptoKoiBindingMetaData.ABI

// CryptoKoiBindingBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use CryptoKoiBindingMetaData.Bin instead.
var CryptoKoiBindingBin = CryptoKoiBindingMetaData.Bin

// DeployCryptoKoiBinding deploys a new Ethereum contract, binding an instance of CryptoKoiBinding to it.
func DeployCryptoKoiBinding(auth *bind.TransactOpts, backend bind.ContractBackend, name string, symbol string) (common.Address, *types.Transaction, *CryptoKoiBinding, error) {
	parsed, err := CryptoKoiBindingMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(CryptoKoiBindingBin), backend, name, symbol)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &CryptoKoiBinding{CryptoKoiBindingCaller: CryptoKoiBindingCaller{contract: contract}, CryptoKoiBindingTransactor: CryptoKoiBindingTransactor{contract: contract}, CryptoKoiBindingFilterer: CryptoKoiBindingFilterer{contract: contract}}, nil
}

// CryptoKoiBinding is an auto generated Go binding around an Ethereum contract.
type CryptoKoiBinding struct {
	CryptoKoiBindingCaller     // Read-only binding to the contract
	CryptoKoiBindingTransactor // Write-only binding to the contract
	CryptoKoiBindingFilterer   // Log filterer for contract events
}

// CryptoKoiBindingCaller is an auto generated read-only Go binding around an Ethereum contract.
type CryptoKoiBindingCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CryptoKoiBindingTransactor is an auto generated write-only Go binding around an Ethereum contract.
type CryptoKoiBindingTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CryptoKoiBindingFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type CryptoKoiBindingFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CryptoKoiBindingSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type CryptoKoiBindingSession struct {
	Contract     *CryptoKoiBinding // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// CryptoKoiBindingCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type CryptoKoiBindingCallerSession struct {
	Contract *CryptoKoiBindingCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts           // Call options to use throughout this session
}

// CryptoKoiBindingTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type CryptoKoiBindingTransactorSession struct {
	Contract     *CryptoKoiBindingTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts           // Transaction auth options to use throughout this session
}

// CryptoKoiBindingRaw is an auto generated low-level Go binding around an Ethereum contract.
type CryptoKoiBindingRaw struct {
	Contract *CryptoKoiBinding // Generic contract binding to access the raw methods on
}

// CryptoKoiBindingCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type CryptoKoiBindingCallerRaw struct {
	Contract *CryptoKoiBindingCaller // Generic read-only contract binding to access the raw methods on
}

// CryptoKoiBindingTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type CryptoKoiBindingTransactorRaw struct {
	Contract *CryptoKoiBindingTransactor // Generic write-only contract binding to access the raw methods on
}

// NewCryptoKoiBinding creates a new instance of CryptoKoiBinding, bound to a specific deployed contract.
func NewCryptoKoiBinding(address common.Address, backend bind.ContractBackend) (*CryptoKoiBinding, error) {
	contract, err := bindCryptoKoiBinding(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &CryptoKoiBinding{CryptoKoiBindingCaller: CryptoKoiBindingCaller{contract: contract}, CryptoKoiBindingTransactor: CryptoKoiBindingTransactor{contract: contract}, CryptoKoiBindingFilterer: CryptoKoiBindingFilterer{contract: contract}}, nil
}

// NewCryptoKoiBindingCaller creates a new read-only instance of CryptoKoiBinding, bound to a specific deployed contract.
func NewCryptoKoiBindingCaller(address common.Address, caller bind.ContractCaller) (*CryptoKoiBindingCaller, error) {
	contract, err := bindCryptoKoiBinding(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &CryptoKoiBindingCaller{contract: contract}, nil
}

// NewCryptoKoiBindingTransactor creates a new write-only instance of CryptoKoiBinding, bound to a specific deployed contract.
func NewCryptoKoiBindingTransactor(address common.Address, transactor bind.ContractTransactor) (*CryptoKoiBindingTransactor, error) {
	contract, err := bindCryptoKoiBinding(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &CryptoKoiBindingTransactor{contract: contract}, nil
}

// NewCryptoKoiBindingFilterer creates a new log filterer instance of CryptoKoiBinding, bound to a specific deployed contract.
func NewCryptoKoiBindingFilterer(address common.Address, filterer bind.ContractFilterer) (*CryptoKoiBindingFilterer, error) {
	contract, err := bindCryptoKoiBinding(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &CryptoKoiBindingFilterer{contract: contract}, nil
}

// bindCryptoKoiBinding binds a generic wrapper to an already deployed contract.
func bindCryptoKoiBinding(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(CryptoKoiBindingABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_CryptoKoiBinding *CryptoKoiBindingRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _CryptoKoiBinding.Contract.CryptoKoiBindingCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_CryptoKoiBinding *CryptoKoiBindingRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CryptoKoiBinding.Contract.CryptoKoiBindingTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_CryptoKoiBinding *CryptoKoiBindingRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _CryptoKoiBinding.Contract.CryptoKoiBindingTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_CryptoKoiBinding *CryptoKoiBindingCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _CryptoKoiBinding.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_CryptoKoiBinding *CryptoKoiBindingTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CryptoKoiBinding.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_CryptoKoiBinding *CryptoKoiBindingTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _CryptoKoiBinding.Contract.contract.Transact(opts, method, params...)
}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_CryptoKoiBinding *CryptoKoiBindingCaller) DEFAULTADMINROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _CryptoKoiBinding.contract.Call(opts, &out, "DEFAULT_ADMIN_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_CryptoKoiBinding *CryptoKoiBindingSession) DEFAULTADMINROLE() ([32]byte, error) {
	return _CryptoKoiBinding.Contract.DEFAULTADMINROLE(&_CryptoKoiBinding.CallOpts)
}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_CryptoKoiBinding *CryptoKoiBindingCallerSession) DEFAULTADMINROLE() ([32]byte, error) {
	return _CryptoKoiBinding.Contract.DEFAULTADMINROLE(&_CryptoKoiBinding.CallOpts)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_CryptoKoiBinding *CryptoKoiBindingCaller) BalanceOf(opts *bind.CallOpts, owner common.Address) (*big.Int, error) {
	var out []interface{}
	err := _CryptoKoiBinding.contract.Call(opts, &out, "balanceOf", owner)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_CryptoKoiBinding *CryptoKoiBindingSession) BalanceOf(owner common.Address) (*big.Int, error) {
	return _CryptoKoiBinding.Contract.BalanceOf(&_CryptoKoiBinding.CallOpts, owner)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_CryptoKoiBinding *CryptoKoiBindingCallerSession) BalanceOf(owner common.Address) (*big.Int, error) {
	return _CryptoKoiBinding.Contract.BalanceOf(&_CryptoKoiBinding.CallOpts, owner)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_CryptoKoiBinding *CryptoKoiBindingCaller) GetApproved(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _CryptoKoiBinding.contract.Call(opts, &out, "getApproved", tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_CryptoKoiBinding *CryptoKoiBindingSession) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _CryptoKoiBinding.Contract.GetApproved(&_CryptoKoiBinding.CallOpts, tokenId)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_CryptoKoiBinding *CryptoKoiBindingCallerSession) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _CryptoKoiBinding.Contract.GetApproved(&_CryptoKoiBinding.CallOpts, tokenId)
}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_CryptoKoiBinding *CryptoKoiBindingCaller) GetRoleAdmin(opts *bind.CallOpts, role [32]byte) ([32]byte, error) {
	var out []interface{}
	err := _CryptoKoiBinding.contract.Call(opts, &out, "getRoleAdmin", role)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_CryptoKoiBinding *CryptoKoiBindingSession) GetRoleAdmin(role [32]byte) ([32]byte, error) {
	return _CryptoKoiBinding.Contract.GetRoleAdmin(&_CryptoKoiBinding.CallOpts, role)
}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_CryptoKoiBinding *CryptoKoiBindingCallerSession) GetRoleAdmin(role [32]byte) ([32]byte, error) {
	return _CryptoKoiBinding.Contract.GetRoleAdmin(&_CryptoKoiBinding.CallOpts, role)
}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_CryptoKoiBinding *CryptoKoiBindingCaller) HasRole(opts *bind.CallOpts, role [32]byte, account common.Address) (bool, error) {
	var out []interface{}
	err := _CryptoKoiBinding.contract.Call(opts, &out, "hasRole", role, account)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_CryptoKoiBinding *CryptoKoiBindingSession) HasRole(role [32]byte, account common.Address) (bool, error) {
	return _CryptoKoiBinding.Contract.HasRole(&_CryptoKoiBinding.CallOpts, role, account)
}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_CryptoKoiBinding *CryptoKoiBindingCallerSession) HasRole(role [32]byte, account common.Address) (bool, error) {
	return _CryptoKoiBinding.Contract.HasRole(&_CryptoKoiBinding.CallOpts, role, account)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_CryptoKoiBinding *CryptoKoiBindingCaller) IsApprovedForAll(opts *bind.CallOpts, owner common.Address, operator common.Address) (bool, error) {
	var out []interface{}
	err := _CryptoKoiBinding.contract.Call(opts, &out, "isApprovedForAll", owner, operator)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_CryptoKoiBinding *CryptoKoiBindingSession) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _CryptoKoiBinding.Contract.IsApprovedForAll(&_CryptoKoiBinding.CallOpts, owner, operator)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_CryptoKoiBinding *CryptoKoiBindingCallerSession) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _CryptoKoiBinding.Contract.IsApprovedForAll(&_CryptoKoiBinding.CallOpts, owner, operator)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_CryptoKoiBinding *CryptoKoiBindingCaller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _CryptoKoiBinding.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_CryptoKoiBinding *CryptoKoiBindingSession) Name() (string, error) {
	return _CryptoKoiBinding.Contract.Name(&_CryptoKoiBinding.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_CryptoKoiBinding *CryptoKoiBindingCallerSession) Name() (string, error) {
	return _CryptoKoiBinding.Contract.Name(&_CryptoKoiBinding.CallOpts)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_CryptoKoiBinding *CryptoKoiBindingCaller) OwnerOf(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _CryptoKoiBinding.contract.Call(opts, &out, "ownerOf", tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_CryptoKoiBinding *CryptoKoiBindingSession) OwnerOf(tokenId *big.Int) (common.Address, error) {
	return _CryptoKoiBinding.Contract.OwnerOf(&_CryptoKoiBinding.CallOpts, tokenId)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_CryptoKoiBinding *CryptoKoiBindingCallerSession) OwnerOf(tokenId *big.Int) (common.Address, error) {
	return _CryptoKoiBinding.Contract.OwnerOf(&_CryptoKoiBinding.CallOpts, tokenId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_CryptoKoiBinding *CryptoKoiBindingCaller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _CryptoKoiBinding.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_CryptoKoiBinding *CryptoKoiBindingSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _CryptoKoiBinding.Contract.SupportsInterface(&_CryptoKoiBinding.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_CryptoKoiBinding *CryptoKoiBindingCallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _CryptoKoiBinding.Contract.SupportsInterface(&_CryptoKoiBinding.CallOpts, interfaceId)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_CryptoKoiBinding *CryptoKoiBindingCaller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _CryptoKoiBinding.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_CryptoKoiBinding *CryptoKoiBindingSession) Symbol() (string, error) {
	return _CryptoKoiBinding.Contract.Symbol(&_CryptoKoiBinding.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_CryptoKoiBinding *CryptoKoiBindingCallerSession) Symbol() (string, error) {
	return _CryptoKoiBinding.Contract.Symbol(&_CryptoKoiBinding.CallOpts)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_CryptoKoiBinding *CryptoKoiBindingCaller) TokenURI(opts *bind.CallOpts, tokenId *big.Int) (string, error) {
	var out []interface{}
	err := _CryptoKoiBinding.contract.Call(opts, &out, "tokenURI", tokenId)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_CryptoKoiBinding *CryptoKoiBindingSession) TokenURI(tokenId *big.Int) (string, error) {
	return _CryptoKoiBinding.Contract.TokenURI(&_CryptoKoiBinding.CallOpts, tokenId)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_CryptoKoiBinding *CryptoKoiBindingCallerSession) TokenURI(tokenId *big.Int) (string, error) {
	return _CryptoKoiBinding.Contract.TokenURI(&_CryptoKoiBinding.CallOpts, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_CryptoKoiBinding *CryptoKoiBindingTransactor) Approve(opts *bind.TransactOpts, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _CryptoKoiBinding.contract.Transact(opts, "approve", to, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_CryptoKoiBinding *CryptoKoiBindingSession) Approve(to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _CryptoKoiBinding.Contract.Approve(&_CryptoKoiBinding.TransactOpts, to, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_CryptoKoiBinding *CryptoKoiBindingTransactorSession) Approve(to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _CryptoKoiBinding.Contract.Approve(&_CryptoKoiBinding.TransactOpts, to, tokenId)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_CryptoKoiBinding *CryptoKoiBindingTransactor) GrantRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _CryptoKoiBinding.contract.Transact(opts, "grantRole", role, account)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_CryptoKoiBinding *CryptoKoiBindingSession) GrantRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _CryptoKoiBinding.Contract.GrantRole(&_CryptoKoiBinding.TransactOpts, role, account)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_CryptoKoiBinding *CryptoKoiBindingTransactorSession) GrantRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _CryptoKoiBinding.Contract.GrantRole(&_CryptoKoiBinding.TransactOpts, role, account)
}

// Redeem is a paid mutator transaction binding the contract method 0x10badf4e.
//
// Solidity: function redeem(address account, uint256 tokenId, bytes signature) returns()
func (_CryptoKoiBinding *CryptoKoiBindingTransactor) Redeem(opts *bind.TransactOpts, account common.Address, tokenId *big.Int, signature []byte) (*types.Transaction, error) {
	return _CryptoKoiBinding.contract.Transact(opts, "redeem", account, tokenId, signature)
}

// Redeem is a paid mutator transaction binding the contract method 0x10badf4e.
//
// Solidity: function redeem(address account, uint256 tokenId, bytes signature) returns()
func (_CryptoKoiBinding *CryptoKoiBindingSession) Redeem(account common.Address, tokenId *big.Int, signature []byte) (*types.Transaction, error) {
	return _CryptoKoiBinding.Contract.Redeem(&_CryptoKoiBinding.TransactOpts, account, tokenId, signature)
}

// Redeem is a paid mutator transaction binding the contract method 0x10badf4e.
//
// Solidity: function redeem(address account, uint256 tokenId, bytes signature) returns()
func (_CryptoKoiBinding *CryptoKoiBindingTransactorSession) Redeem(account common.Address, tokenId *big.Int, signature []byte) (*types.Transaction, error) {
	return _CryptoKoiBinding.Contract.Redeem(&_CryptoKoiBinding.TransactOpts, account, tokenId, signature)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_CryptoKoiBinding *CryptoKoiBindingTransactor) RenounceRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _CryptoKoiBinding.contract.Transact(opts, "renounceRole", role, account)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_CryptoKoiBinding *CryptoKoiBindingSession) RenounceRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _CryptoKoiBinding.Contract.RenounceRole(&_CryptoKoiBinding.TransactOpts, role, account)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_CryptoKoiBinding *CryptoKoiBindingTransactorSession) RenounceRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _CryptoKoiBinding.Contract.RenounceRole(&_CryptoKoiBinding.TransactOpts, role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_CryptoKoiBinding *CryptoKoiBindingTransactor) RevokeRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _CryptoKoiBinding.contract.Transact(opts, "revokeRole", role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_CryptoKoiBinding *CryptoKoiBindingSession) RevokeRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _CryptoKoiBinding.Contract.RevokeRole(&_CryptoKoiBinding.TransactOpts, role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_CryptoKoiBinding *CryptoKoiBindingTransactorSession) RevokeRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _CryptoKoiBinding.Contract.RevokeRole(&_CryptoKoiBinding.TransactOpts, role, account)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_CryptoKoiBinding *CryptoKoiBindingTransactor) SafeTransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _CryptoKoiBinding.contract.Transact(opts, "safeTransferFrom", from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_CryptoKoiBinding *CryptoKoiBindingSession) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _CryptoKoiBinding.Contract.SafeTransferFrom(&_CryptoKoiBinding.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_CryptoKoiBinding *CryptoKoiBindingTransactorSession) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _CryptoKoiBinding.Contract.SafeTransferFrom(&_CryptoKoiBinding.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes _data) returns()
func (_CryptoKoiBinding *CryptoKoiBindingTransactor) SafeTransferFrom0(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int, _data []byte) (*types.Transaction, error) {
	return _CryptoKoiBinding.contract.Transact(opts, "safeTransferFrom0", from, to, tokenId, _data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes _data) returns()
func (_CryptoKoiBinding *CryptoKoiBindingSession) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, _data []byte) (*types.Transaction, error) {
	return _CryptoKoiBinding.Contract.SafeTransferFrom0(&_CryptoKoiBinding.TransactOpts, from, to, tokenId, _data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes _data) returns()
func (_CryptoKoiBinding *CryptoKoiBindingTransactorSession) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, _data []byte) (*types.Transaction, error) {
	return _CryptoKoiBinding.Contract.SafeTransferFrom0(&_CryptoKoiBinding.TransactOpts, from, to, tokenId, _data)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_CryptoKoiBinding *CryptoKoiBindingTransactor) SetApprovalForAll(opts *bind.TransactOpts, operator common.Address, approved bool) (*types.Transaction, error) {
	return _CryptoKoiBinding.contract.Transact(opts, "setApprovalForAll", operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_CryptoKoiBinding *CryptoKoiBindingSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _CryptoKoiBinding.Contract.SetApprovalForAll(&_CryptoKoiBinding.TransactOpts, operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_CryptoKoiBinding *CryptoKoiBindingTransactorSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _CryptoKoiBinding.Contract.SetApprovalForAll(&_CryptoKoiBinding.TransactOpts, operator, approved)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_CryptoKoiBinding *CryptoKoiBindingTransactor) TransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _CryptoKoiBinding.contract.Transact(opts, "transferFrom", from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_CryptoKoiBinding *CryptoKoiBindingSession) TransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _CryptoKoiBinding.Contract.TransferFrom(&_CryptoKoiBinding.TransactOpts, from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_CryptoKoiBinding *CryptoKoiBindingTransactorSession) TransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _CryptoKoiBinding.Contract.TransferFrom(&_CryptoKoiBinding.TransactOpts, from, to, tokenId)
}

// CryptoKoiBindingApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the CryptoKoiBinding contract.
type CryptoKoiBindingApprovalIterator struct {
	Event *CryptoKoiBindingApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CryptoKoiBindingApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CryptoKoiBindingApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CryptoKoiBindingApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CryptoKoiBindingApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CryptoKoiBindingApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CryptoKoiBindingApproval represents a Approval event raised by the CryptoKoiBinding contract.
type CryptoKoiBindingApproval struct {
	Owner    common.Address
	Approved common.Address
	TokenId  *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_CryptoKoiBinding *CryptoKoiBindingFilterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, approved []common.Address, tokenId []*big.Int) (*CryptoKoiBindingApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _CryptoKoiBinding.contract.FilterLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &CryptoKoiBindingApprovalIterator{contract: _CryptoKoiBinding.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_CryptoKoiBinding *CryptoKoiBindingFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *CryptoKoiBindingApproval, owner []common.Address, approved []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _CryptoKoiBinding.contract.WatchLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CryptoKoiBindingApproval)
				if err := _CryptoKoiBinding.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_CryptoKoiBinding *CryptoKoiBindingFilterer) ParseApproval(log types.Log) (*CryptoKoiBindingApproval, error) {
	event := new(CryptoKoiBindingApproval)
	if err := _CryptoKoiBinding.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CryptoKoiBindingApprovalForAllIterator is returned from FilterApprovalForAll and is used to iterate over the raw logs and unpacked data for ApprovalForAll events raised by the CryptoKoiBinding contract.
type CryptoKoiBindingApprovalForAllIterator struct {
	Event *CryptoKoiBindingApprovalForAll // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CryptoKoiBindingApprovalForAllIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CryptoKoiBindingApprovalForAll)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CryptoKoiBindingApprovalForAll)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CryptoKoiBindingApprovalForAllIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CryptoKoiBindingApprovalForAllIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CryptoKoiBindingApprovalForAll represents a ApprovalForAll event raised by the CryptoKoiBinding contract.
type CryptoKoiBindingApprovalForAll struct {
	Owner    common.Address
	Operator common.Address
	Approved bool
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApprovalForAll is a free log retrieval operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_CryptoKoiBinding *CryptoKoiBindingFilterer) FilterApprovalForAll(opts *bind.FilterOpts, owner []common.Address, operator []common.Address) (*CryptoKoiBindingApprovalForAllIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _CryptoKoiBinding.contract.FilterLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return &CryptoKoiBindingApprovalForAllIterator{contract: _CryptoKoiBinding.contract, event: "ApprovalForAll", logs: logs, sub: sub}, nil
}

// WatchApprovalForAll is a free log subscription operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_CryptoKoiBinding *CryptoKoiBindingFilterer) WatchApprovalForAll(opts *bind.WatchOpts, sink chan<- *CryptoKoiBindingApprovalForAll, owner []common.Address, operator []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _CryptoKoiBinding.contract.WatchLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CryptoKoiBindingApprovalForAll)
				if err := _CryptoKoiBinding.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApprovalForAll is a log parse operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_CryptoKoiBinding *CryptoKoiBindingFilterer) ParseApprovalForAll(log types.Log) (*CryptoKoiBindingApprovalForAll, error) {
	event := new(CryptoKoiBindingApprovalForAll)
	if err := _CryptoKoiBinding.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CryptoKoiBindingRoleAdminChangedIterator is returned from FilterRoleAdminChanged and is used to iterate over the raw logs and unpacked data for RoleAdminChanged events raised by the CryptoKoiBinding contract.
type CryptoKoiBindingRoleAdminChangedIterator struct {
	Event *CryptoKoiBindingRoleAdminChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CryptoKoiBindingRoleAdminChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CryptoKoiBindingRoleAdminChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CryptoKoiBindingRoleAdminChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CryptoKoiBindingRoleAdminChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CryptoKoiBindingRoleAdminChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CryptoKoiBindingRoleAdminChanged represents a RoleAdminChanged event raised by the CryptoKoiBinding contract.
type CryptoKoiBindingRoleAdminChanged struct {
	Role              [32]byte
	PreviousAdminRole [32]byte
	NewAdminRole      [32]byte
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterRoleAdminChanged is a free log retrieval operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_CryptoKoiBinding *CryptoKoiBindingFilterer) FilterRoleAdminChanged(opts *bind.FilterOpts, role [][32]byte, previousAdminRole [][32]byte, newAdminRole [][32]byte) (*CryptoKoiBindingRoleAdminChangedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var previousAdminRoleRule []interface{}
	for _, previousAdminRoleItem := range previousAdminRole {
		previousAdminRoleRule = append(previousAdminRoleRule, previousAdminRoleItem)
	}
	var newAdminRoleRule []interface{}
	for _, newAdminRoleItem := range newAdminRole {
		newAdminRoleRule = append(newAdminRoleRule, newAdminRoleItem)
	}

	logs, sub, err := _CryptoKoiBinding.contract.FilterLogs(opts, "RoleAdminChanged", roleRule, previousAdminRoleRule, newAdminRoleRule)
	if err != nil {
		return nil, err
	}
	return &CryptoKoiBindingRoleAdminChangedIterator{contract: _CryptoKoiBinding.contract, event: "RoleAdminChanged", logs: logs, sub: sub}, nil
}

// WatchRoleAdminChanged is a free log subscription operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_CryptoKoiBinding *CryptoKoiBindingFilterer) WatchRoleAdminChanged(opts *bind.WatchOpts, sink chan<- *CryptoKoiBindingRoleAdminChanged, role [][32]byte, previousAdminRole [][32]byte, newAdminRole [][32]byte) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var previousAdminRoleRule []interface{}
	for _, previousAdminRoleItem := range previousAdminRole {
		previousAdminRoleRule = append(previousAdminRoleRule, previousAdminRoleItem)
	}
	var newAdminRoleRule []interface{}
	for _, newAdminRoleItem := range newAdminRole {
		newAdminRoleRule = append(newAdminRoleRule, newAdminRoleItem)
	}

	logs, sub, err := _CryptoKoiBinding.contract.WatchLogs(opts, "RoleAdminChanged", roleRule, previousAdminRoleRule, newAdminRoleRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CryptoKoiBindingRoleAdminChanged)
				if err := _CryptoKoiBinding.contract.UnpackLog(event, "RoleAdminChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleAdminChanged is a log parse operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_CryptoKoiBinding *CryptoKoiBindingFilterer) ParseRoleAdminChanged(log types.Log) (*CryptoKoiBindingRoleAdminChanged, error) {
	event := new(CryptoKoiBindingRoleAdminChanged)
	if err := _CryptoKoiBinding.contract.UnpackLog(event, "RoleAdminChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CryptoKoiBindingRoleGrantedIterator is returned from FilterRoleGranted and is used to iterate over the raw logs and unpacked data for RoleGranted events raised by the CryptoKoiBinding contract.
type CryptoKoiBindingRoleGrantedIterator struct {
	Event *CryptoKoiBindingRoleGranted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CryptoKoiBindingRoleGrantedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CryptoKoiBindingRoleGranted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CryptoKoiBindingRoleGranted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CryptoKoiBindingRoleGrantedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CryptoKoiBindingRoleGrantedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CryptoKoiBindingRoleGranted represents a RoleGranted event raised by the CryptoKoiBinding contract.
type CryptoKoiBindingRoleGranted struct {
	Role    [32]byte
	Account common.Address
	Sender  common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRoleGranted is a free log retrieval operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_CryptoKoiBinding *CryptoKoiBindingFilterer) FilterRoleGranted(opts *bind.FilterOpts, role [][32]byte, account []common.Address, sender []common.Address) (*CryptoKoiBindingRoleGrantedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _CryptoKoiBinding.contract.FilterLogs(opts, "RoleGranted", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &CryptoKoiBindingRoleGrantedIterator{contract: _CryptoKoiBinding.contract, event: "RoleGranted", logs: logs, sub: sub}, nil
}

// WatchRoleGranted is a free log subscription operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_CryptoKoiBinding *CryptoKoiBindingFilterer) WatchRoleGranted(opts *bind.WatchOpts, sink chan<- *CryptoKoiBindingRoleGranted, role [][32]byte, account []common.Address, sender []common.Address) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _CryptoKoiBinding.contract.WatchLogs(opts, "RoleGranted", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CryptoKoiBindingRoleGranted)
				if err := _CryptoKoiBinding.contract.UnpackLog(event, "RoleGranted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleGranted is a log parse operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_CryptoKoiBinding *CryptoKoiBindingFilterer) ParseRoleGranted(log types.Log) (*CryptoKoiBindingRoleGranted, error) {
	event := new(CryptoKoiBindingRoleGranted)
	if err := _CryptoKoiBinding.contract.UnpackLog(event, "RoleGranted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CryptoKoiBindingRoleRevokedIterator is returned from FilterRoleRevoked and is used to iterate over the raw logs and unpacked data for RoleRevoked events raised by the CryptoKoiBinding contract.
type CryptoKoiBindingRoleRevokedIterator struct {
	Event *CryptoKoiBindingRoleRevoked // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CryptoKoiBindingRoleRevokedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CryptoKoiBindingRoleRevoked)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CryptoKoiBindingRoleRevoked)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CryptoKoiBindingRoleRevokedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CryptoKoiBindingRoleRevokedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CryptoKoiBindingRoleRevoked represents a RoleRevoked event raised by the CryptoKoiBinding contract.
type CryptoKoiBindingRoleRevoked struct {
	Role    [32]byte
	Account common.Address
	Sender  common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRoleRevoked is a free log retrieval operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_CryptoKoiBinding *CryptoKoiBindingFilterer) FilterRoleRevoked(opts *bind.FilterOpts, role [][32]byte, account []common.Address, sender []common.Address) (*CryptoKoiBindingRoleRevokedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _CryptoKoiBinding.contract.FilterLogs(opts, "RoleRevoked", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &CryptoKoiBindingRoleRevokedIterator{contract: _CryptoKoiBinding.contract, event: "RoleRevoked", logs: logs, sub: sub}, nil
}

// WatchRoleRevoked is a free log subscription operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_CryptoKoiBinding *CryptoKoiBindingFilterer) WatchRoleRevoked(opts *bind.WatchOpts, sink chan<- *CryptoKoiBindingRoleRevoked, role [][32]byte, account []common.Address, sender []common.Address) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _CryptoKoiBinding.contract.WatchLogs(opts, "RoleRevoked", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CryptoKoiBindingRoleRevoked)
				if err := _CryptoKoiBinding.contract.UnpackLog(event, "RoleRevoked", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleRevoked is a log parse operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_CryptoKoiBinding *CryptoKoiBindingFilterer) ParseRoleRevoked(log types.Log) (*CryptoKoiBindingRoleRevoked, error) {
	event := new(CryptoKoiBindingRoleRevoked)
	if err := _CryptoKoiBinding.contract.UnpackLog(event, "RoleRevoked", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CryptoKoiBindingTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the CryptoKoiBinding contract.
type CryptoKoiBindingTransferIterator struct {
	Event *CryptoKoiBindingTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CryptoKoiBindingTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CryptoKoiBindingTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CryptoKoiBindingTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CryptoKoiBindingTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CryptoKoiBindingTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CryptoKoiBindingTransfer represents a Transfer event raised by the CryptoKoiBinding contract.
type CryptoKoiBindingTransfer struct {
	From    common.Address
	To      common.Address
	TokenId *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_CryptoKoiBinding *CryptoKoiBindingFilterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address, tokenId []*big.Int) (*CryptoKoiBindingTransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _CryptoKoiBinding.contract.FilterLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &CryptoKoiBindingTransferIterator{contract: _CryptoKoiBinding.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_CryptoKoiBinding *CryptoKoiBindingFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *CryptoKoiBindingTransfer, from []common.Address, to []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _CryptoKoiBinding.contract.WatchLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CryptoKoiBindingTransfer)
				if err := _CryptoKoiBinding.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_CryptoKoiBinding *CryptoKoiBindingFilterer) ParseTransfer(log types.Log) (*CryptoKoiBindingTransfer, error) {
	event := new(CryptoKoiBindingTransfer)
	if err := _CryptoKoiBinding.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
