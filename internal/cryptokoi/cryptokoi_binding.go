// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package cryptokoi

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// CryptoKoiBindingMetaData contains all meta data concerning the CryptoKoiBinding contract.
var CryptoKoiBindingMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"redeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x60806040523480156200001157600080fd5b506040516200417038038062004170833981810160405281019062000037919062000461565b818181600090805190602001906200005192919062000214565b5080600190805190602001906200006a92919062000214565b505050620000916000801b620000856200009960201b60201c565b620000a160201b60201c565b50506200054b565b600033905090565b620000b38282620000b760201b60201c565b5050565b620000c98282620001a960201b60201c565b620001a55760016006600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506200014a6200009960201b60201c565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b60006006600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b828054620002229062000515565b90600052602060002090601f01602090048101928262000246576000855562000292565b82601f106200026157805160ff191683800117855562000292565b8280016001018555821562000292579182015b828111156200029157825182559160200191906001019062000274565b5b509050620002a19190620002a5565b5090565b5b80821115620002c0576000816000905550600101620002a6565b5090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6200032d82620002e2565b810181811067ffffffffffffffff821117156200034f576200034e620002f3565b5b80604052505050565b600062000364620002c4565b905062000372828262000322565b919050565b600067ffffffffffffffff821115620003955762000394620002f3565b5b620003a082620002e2565b9050602081019050919050565b60005b83811015620003cd578082015181840152602081019050620003b0565b83811115620003dd576000848401525b50505050565b6000620003fa620003f48462000377565b62000358565b905082815260208101848484011115620004195762000418620002dd565b5b62000426848285620003ad565b509392505050565b600082601f830112620004465762000445620002d8565b5b815162000458848260208601620003e3565b91505092915050565b600080604083850312156200047b576200047a620002ce565b5b600083015167ffffffffffffffff8111156200049c576200049b620002d3565b5b620004aa858286016200042e565b925050602083015167ffffffffffffffff811115620004ce57620004cd620002d3565b5b620004dc858286016200042e565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200052e57607f821691505b60208210811415620005455762000544620004e6565b5b50919050565b613c15806200055b6000396000f3fe608060405234801561001057600080fd5b506004361061012c5760003560e01c80636352211e116100ad578063a22cb46511610071578063a22cb46514610353578063b88d4fde1461036f578063c87b56dd1461038b578063d547741f146103bb578063e985e9c5146103d75761012c565b80636352211e1461028757806370a08231146102b757806391d14854146102e757806395d89b4114610317578063a217fddf146103355761012c565b806323b872dd116100f457806323b872dd146101e7578063248a9ca3146102035780632f2ff15d1461023357806336568abe1461024f57806342842e0e1461026b5761012c565b806301ffc9a71461013157806306fdde0314610161578063081812fc1461017f578063095ea7b3146101af57806310badf4e146101cb575b600080fd5b61014b60048036038101906101469190612383565b610407565b60405161015891906123cb565b60405180910390f35b610169610419565b604051610176919061247f565b60405180910390f35b610199600480360381019061019491906124d7565b6104ab565b6040516101a69190612545565b60405180910390f35b6101c960048036038101906101c4919061258c565b610530565b005b6101e560048036038101906101e09190612631565b610648565b005b61020160048036038101906101fc91906126a5565b6106ee565b005b61021d6004803603810190610218919061272e565b61074e565b60405161022a919061276a565b60405180910390f35b61024d60048036038101906102489190612785565b61076e565b005b61026960048036038101906102649190612785565b610797565b005b610285600480360381019061028091906126a5565b61081a565b005b6102a1600480360381019061029c91906124d7565b61083a565b6040516102ae9190612545565b60405180910390f35b6102d160048036038101906102cc91906127c5565b6108ec565b6040516102de9190612801565b60405180910390f35b61030160048036038101906102fc9190612785565b6109a4565b60405161030e91906123cb565b60405180910390f35b61031f610a0f565b60405161032c919061247f565b60405180910390f35b61033d610aa1565b60405161034a919061276a565b60405180910390f35b61036d60048036038101906103689190612848565b610aa8565b005b610389600480360381019061038491906129b8565b610abe565b005b6103a560048036038101906103a091906124d7565b610b20565b6040516103b2919061247f565b60405180910390f35b6103d560048036038101906103d09190612785565b610bc7565b005b6103f160048036038101906103ec9190612a3b565b610bf0565b6040516103fe91906123cb565b60405180910390f35b600061041282610c84565b9050919050565b60606000805461042890612aaa565b80601f016020809104026020016040519081016040528092919081815260200182805461045490612aaa565b80156104a15780601f10610476576101008083540402835291602001916104a1565b820191906000526020600020905b81548152906001019060200180831161048457829003601f168201915b5050505050905090565b60006104b682610cfe565b6104f5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104ec90612b4e565b60405180910390fd5b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600061053b8261083a565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156105ac576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105a390612be0565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166105cb610d6a565b73ffffffffffffffffffffffffffffffffffffffff1614806105fa57506105f9816105f4610d6a565b610bf0565b5b610639576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161063090612c72565b60405180910390fd5b6106438383610d72565b505050565b61069f6106558585610e2b565b83838080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050610e66565b6106de576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106d590612cde565b60405180910390fd5b6106e88484610e86565b50505050565b6106ff6106f9610d6a565b82610ea4565b61073e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161073590612d70565b60405180910390fd5b610749838383610f82565b505050565b600060066000838152602001908152602001600020600101549050919050565b6107778261074e565b61078881610783610d6a565b6111e9565b6107928383611286565b505050565b61079f610d6a565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461080c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161080390612e02565b60405180910390fd5b6108168282611367565b5050565b61083583838360405180602001604052806000815250610abe565b505050565b6000806002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156108e3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108da90612e94565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561095d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161095490612f26565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60006006600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b606060018054610a1e90612aaa565b80601f0160208091040260200160405190810160405280929190818152602001828054610a4a90612aaa565b8015610a975780601f10610a6c57610100808354040283529160200191610a97565b820191906000526020600020905b815481529060010190602001808311610a7a57829003601f168201915b5050505050905090565b6000801b81565b610aba610ab3610d6a565b8383611449565b5050565b610acf610ac9610d6a565b83610ea4565b610b0e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b0590612d70565b60405180910390fd5b610b1a848484846115b6565b50505050565b6060610b2b82610cfe565b610b6a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b6190612fb8565b60405180910390fd5b6000610b74611612565b90506000815111610b945760405180602001604052806000815250610bbf565b80610b9e84611629565b604051602001610baf929190613014565b6040516020818303038152906040525b915050919050565b610bd08261074e565b610be181610bdc610d6a565b6111e9565b610beb8383611367565b505050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60007f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480610cf75750610cf68261178a565b5b9050919050565b60008073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16610de58361083a565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000610e5e8284604051602001610e439291906130a1565b6040516020818303038152906040528051906020012061186c565b905092915050565b6000610e7e6000801b610e79858561189c565b6109a4565b905092915050565b610ea08282604051806020016040528060008152506118c3565b5050565b6000610eaf82610cfe565b610eee576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ee59061313f565b60405180910390fd5b6000610ef98361083a565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480610f6857508373ffffffffffffffffffffffffffffffffffffffff16610f50846104ab565b73ffffffffffffffffffffffffffffffffffffffff16145b80610f795750610f788185610bf0565b5b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff16610fa28261083a565b73ffffffffffffffffffffffffffffffffffffffff1614610ff8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fef906131d1565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611068576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161105f90613263565b60405180910390fd5b61107383838361191e565b61107e600082610d72565b6001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546110ce91906132b2565b925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461112591906132e6565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a46111e4838383611923565b505050565b6111f382826109a4565b611282576112188173ffffffffffffffffffffffffffffffffffffffff166014611928565b6112268360001c6020611928565b6040516020016112379291906133d4565b6040516020818303038152906040526040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611279919061247f565b60405180910390fd5b5050565b61129082826109a4565b6113635760016006600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550611308610d6a565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b61137182826109a4565b156114455760006006600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506113ea610d6a565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45b5050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156114b8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114af9061345a565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516115a991906123cb565b60405180910390a3505050565b6115c1848484610f82565b6115cd84848484611b64565b61160c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611603906134ec565b60405180910390fd5b50505050565b606060405180602001604052806000815250905090565b60606000821415611671576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050611785565b600082905060005b600082146116a357808061168c9061350c565b915050600a8261169c9190613584565b9150611679565b60008167ffffffffffffffff8111156116bf576116be61288d565b5b6040519080825280601f01601f1916602001820160405280156116f15781602001600182028036833780820191505090505b5090505b6000851461177e5760018261170a91906132b2565b9150600a8561171991906135b5565b603061172591906132e6565b60f81b81838151811061173b5761173a6135e6565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a856117779190613584565b94506116f5565b8093505050505b919050565b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061185557507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80611865575061186482611cec565b5b9050919050565b60008160405160200161187f9190613682565b604051602081830303815290604052805190602001209050919050565b60008060006118ab8585611d56565b915091506118b881611dd9565b819250505092915050565b6118cd8383611fae565b6118da6000848484611b64565b611919576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611910906134ec565b60405180910390fd5b505050565b505050565b505050565b60606000600283600261193b91906136a8565b61194591906132e6565b67ffffffffffffffff81111561195e5761195d61288d565b5b6040519080825280601f01601f1916602001820160405280156119905781602001600182028036833780820191505090505b5090507f3000000000000000000000000000000000000000000000000000000000000000816000815181106119c8576119c76135e6565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110611a2c57611a2b6135e6565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060006001846002611a6c91906136a8565b611a7691906132e6565b90505b6001811115611b16577f3031323334353637383961626364656600000000000000000000000000000000600f861660108110611ab857611ab76135e6565b5b1a60f81b828281518110611acf57611ace6135e6565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c945080611b0f90613702565b9050611a79565b5060008414611b5a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b5190613778565b60405180910390fd5b8091505092915050565b6000611b858473ffffffffffffffffffffffffffffffffffffffff16612188565b15611cdf578373ffffffffffffffffffffffffffffffffffffffff1663150b7a02611bae610d6a565b8786866040518563ffffffff1660e01b8152600401611bd094939291906137ed565b6020604051808303816000875af1925050508015611c0c57506040513d601f19601f82011682018060405250810190611c09919061384e565b60015b611c8f573d8060008114611c3c576040519150601f19603f3d011682016040523d82523d6000602084013e611c41565b606091505b50600081511415611c87576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c7e906134ec565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050611ce4565b600190505b949350505050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b600080604183511415611d985760008060006020860151925060408601519150606086015160001a9050611d8c878285856121ab565b94509450505050611dd2565b604083511415611dc9576000806020850151915060408501519050611dbe8683836122b8565b935093505050611dd2565b60006002915091505b9250929050565b60006004811115611ded57611dec61387b565b5b816004811115611e0057611dff61387b565b5b1415611e0b57611fab565b60016004811115611e1f57611e1e61387b565b5b816004811115611e3257611e3161387b565b5b1415611e73576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e6a906138f6565b60405180910390fd5b60026004811115611e8757611e8661387b565b5b816004811115611e9a57611e9961387b565b5b1415611edb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ed290613962565b60405180910390fd5b60036004811115611eef57611eee61387b565b5b816004811115611f0257611f0161387b565b5b1415611f43576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f3a906139f4565b60405180910390fd5b600480811115611f5657611f5561387b565b5b816004811115611f6957611f6861387b565b5b1415611faa576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fa190613a86565b60405180910390fd5b5b50565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561201e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161201590613af2565b60405180910390fd5b61202781610cfe565b15612067576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161205e90613b5e565b60405180910390fd5b6120736000838361191e565b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546120c391906132e6565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a461218460008383611923565b5050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08360001c11156121e65760006003915091506122af565b601b8560ff16141580156121fe5750601c8560ff1614155b156122105760006004915091506122af565b6000600187878787604051600081526020016040526040516122359493929190613b9a565b6020604051602081039080840390855afa158015612257573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156122a6576000600192509250506122af565b80600092509250505b94509492505050565b60008060007f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60001b841690506000601b60ff8660001c901c6122fb91906132e6565b9050612309878288856121ab565b935093505050935093915050565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6123608161232b565b811461236b57600080fd5b50565b60008135905061237d81612357565b92915050565b60006020828403121561239957612398612321565b5b60006123a78482850161236e565b91505092915050565b60008115159050919050565b6123c5816123b0565b82525050565b60006020820190506123e060008301846123bc565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015612420578082015181840152602081019050612405565b8381111561242f576000848401525b50505050565b6000601f19601f8301169050919050565b6000612451826123e6565b61245b81856123f1565b935061246b818560208601612402565b61247481612435565b840191505092915050565b600060208201905081810360008301526124998184612446565b905092915050565b6000819050919050565b6124b4816124a1565b81146124bf57600080fd5b50565b6000813590506124d1816124ab565b92915050565b6000602082840312156124ed576124ec612321565b5b60006124fb848285016124c2565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061252f82612504565b9050919050565b61253f81612524565b82525050565b600060208201905061255a6000830184612536565b92915050565b61256981612524565b811461257457600080fd5b50565b60008135905061258681612560565b92915050565b600080604083850312156125a3576125a2612321565b5b60006125b185828601612577565b92505060206125c2858286016124c2565b9150509250929050565b600080fd5b600080fd5b600080fd5b60008083601f8401126125f1576125f06125cc565b5b8235905067ffffffffffffffff81111561260e5761260d6125d1565b5b60208301915083600182028301111561262a576126296125d6565b5b9250929050565b6000806000806060858703121561264b5761264a612321565b5b600061265987828801612577565b945050602061266a878288016124c2565b935050604085013567ffffffffffffffff81111561268b5761268a612326565b5b612697878288016125db565b925092505092959194509250565b6000806000606084860312156126be576126bd612321565b5b60006126cc86828701612577565b93505060206126dd86828701612577565b92505060406126ee868287016124c2565b9150509250925092565b6000819050919050565b61270b816126f8565b811461271657600080fd5b50565b60008135905061272881612702565b92915050565b60006020828403121561274457612743612321565b5b600061275284828501612719565b91505092915050565b612764816126f8565b82525050565b600060208201905061277f600083018461275b565b92915050565b6000806040838503121561279c5761279b612321565b5b60006127aa85828601612719565b92505060206127bb85828601612577565b9150509250929050565b6000602082840312156127db576127da612321565b5b60006127e984828501612577565b91505092915050565b6127fb816124a1565b82525050565b600060208201905061281660008301846127f2565b92915050565b612825816123b0565b811461283057600080fd5b50565b6000813590506128428161281c565b92915050565b6000806040838503121561285f5761285e612321565b5b600061286d85828601612577565b925050602061287e85828601612833565b9150509250929050565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6128c582612435565b810181811067ffffffffffffffff821117156128e4576128e361288d565b5b80604052505050565b60006128f7612317565b905061290382826128bc565b919050565b600067ffffffffffffffff8211156129235761292261288d565b5b61292c82612435565b9050602081019050919050565b82818337600083830152505050565b600061295b61295684612908565b6128ed565b90508281526020810184848401111561297757612976612888565b5b612982848285612939565b509392505050565b600082601f83011261299f5761299e6125cc565b5b81356129af848260208601612948565b91505092915050565b600080600080608085870312156129d2576129d1612321565b5b60006129e087828801612577565b94505060206129f187828801612577565b9350506040612a02878288016124c2565b925050606085013567ffffffffffffffff811115612a2357612a22612326565b5b612a2f8782880161298a565b91505092959194509250565b60008060408385031215612a5257612a51612321565b5b6000612a6085828601612577565b9250506020612a7185828601612577565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680612ac257607f821691505b60208210811415612ad657612ad5612a7b565b5b50919050565b7f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b6000612b38602c836123f1565b9150612b4382612adc565b604082019050919050565b60006020820190508181036000830152612b6781612b2b565b9050919050565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b6000612bca6021836123f1565b9150612bd582612b6e565b604082019050919050565b60006020820190508181036000830152612bf981612bbd565b9050919050565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760008201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000602082015250565b6000612c5c6038836123f1565b9150612c6782612c00565b604082019050919050565b60006020820190508181036000830152612c8b81612c4f565b9050919050565b7f496e76616c6964207369676e6174757265000000000000000000000000000000600082015250565b6000612cc86011836123f1565b9150612cd382612c92565b602082019050919050565b60006020820190508181036000830152612cf781612cbb565b9050919050565b7f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60008201527f776e6572206e6f7220617070726f766564000000000000000000000000000000602082015250565b6000612d5a6031836123f1565b9150612d6582612cfe565b604082019050919050565b60006020820190508181036000830152612d8981612d4d565b9050919050565b7f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560008201527f20726f6c657320666f722073656c660000000000000000000000000000000000602082015250565b6000612dec602f836123f1565b9150612df782612d90565b604082019050919050565b60006020820190508181036000830152612e1b81612ddf565b9050919050565b7f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460008201527f656e7420746f6b656e0000000000000000000000000000000000000000000000602082015250565b6000612e7e6029836123f1565b9150612e8982612e22565b604082019050919050565b60006020820190508181036000830152612ead81612e71565b9050919050565b7f4552433732313a2062616c616e636520717565727920666f7220746865207a6560008201527f726f206164647265737300000000000000000000000000000000000000000000602082015250565b6000612f10602a836123f1565b9150612f1b82612eb4565b604082019050919050565b60006020820190508181036000830152612f3f81612f03565b9050919050565b7f4552433732314d657461646174613a2055524920717565727920666f72206e6f60008201527f6e6578697374656e7420746f6b656e0000000000000000000000000000000000602082015250565b6000612fa2602f836123f1565b9150612fad82612f46565b604082019050919050565b60006020820190508181036000830152612fd181612f95565b9050919050565b600081905092915050565b6000612fee826123e6565b612ff88185612fd8565b9350613008818560208601612402565b80840191505092915050565b60006130208285612fe3565b915061302c8284612fe3565b91508190509392505050565b6000819050919050565b61305361304e826124a1565b613038565b82525050565b60008160601b9050919050565b600061307182613059565b9050919050565b600061308382613066565b9050919050565b61309b61309682612524565b613078565b82525050565b60006130ad8285613042565b6020820191506130bd828461308a565b6014820191508190509392505050565b7f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b6000613129602c836123f1565b9150613134826130cd565b604082019050919050565b600060208201905081810360008301526131588161311c565b9050919050565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b60006131bb6025836123f1565b91506131c68261315f565b604082019050919050565b600060208201905081810360008301526131ea816131ae565b9050919050565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b600061324d6024836123f1565b9150613258826131f1565b604082019050919050565b6000602082019050818103600083015261327c81613240565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006132bd826124a1565b91506132c8836124a1565b9250828210156132db576132da613283565b5b828203905092915050565b60006132f1826124a1565b91506132fc836124a1565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561333157613330613283565b5b828201905092915050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000600082015250565b6000613372601783612fd8565b915061337d8261333c565b601782019050919050565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000600082015250565b60006133be601183612fd8565b91506133c982613388565b601182019050919050565b60006133df82613365565b91506133eb8285612fe3565b91506133f6826133b1565b91506134028284612fe3565b91508190509392505050565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b60006134446019836123f1565b915061344f8261340e565b602082019050919050565b6000602082019050818103600083015261347381613437565b9050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b60006134d66032836123f1565b91506134e18261347a565b604082019050919050565b60006020820190508181036000830152613505816134c9565b9050919050565b6000613517826124a1565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561354a57613549613283565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061358f826124a1565b915061359a836124a1565b9250826135aa576135a9613555565b5b828204905092915050565b60006135c0826124a1565b91506135cb836124a1565b9250826135db576135da613555565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f19457468657265756d205369676e6564204d6573736167653a0a333200000000600082015250565b600061364b601c83612fd8565b915061365682613615565b601c82019050919050565b6000819050919050565b61367c613677826126f8565b613661565b82525050565b600061368d8261363e565b9150613699828461366b565b60208201915081905092915050565b60006136b3826124a1565b91506136be836124a1565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156136f7576136f6613283565b5b828202905092915050565b600061370d826124a1565b9150600082141561372157613720613283565b5b600182039050919050565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b60006137626020836123f1565b915061376d8261372c565b602082019050919050565b6000602082019050818103600083015261379181613755565b9050919050565b600081519050919050565b600082825260208201905092915050565b60006137bf82613798565b6137c981856137a3565b93506137d9818560208601612402565b6137e281612435565b840191505092915050565b60006080820190506138026000830187612536565b61380f6020830186612536565b61381c60408301856127f2565b818103606083015261382e81846137b4565b905095945050505050565b60008151905061384881612357565b92915050565b60006020828403121561386457613863612321565b5b600061387284828501613839565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f45434453413a20696e76616c6964207369676e61747572650000000000000000600082015250565b60006138e06018836123f1565b91506138eb826138aa565b602082019050919050565b6000602082019050818103600083015261390f816138d3565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265206c656e67746800600082015250565b600061394c601f836123f1565b915061395782613916565b602082019050919050565b6000602082019050818103600083015261397b8161393f565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265202773272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b60006139de6022836123f1565b91506139e982613982565b604082019050919050565b60006020820190508181036000830152613a0d816139d1565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265202776272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b6000613a706022836123f1565b9150613a7b82613a14565b604082019050919050565b60006020820190508181036000830152613a9f81613a63565b9050919050565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b6000613adc6020836123f1565b9150613ae782613aa6565b602082019050919050565b60006020820190508181036000830152613b0b81613acf565b9050919050565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b6000613b48601c836123f1565b9150613b5382613b12565b602082019050919050565b60006020820190508181036000830152613b7781613b3b565b9050919050565b600060ff82169050919050565b613b9481613b7e565b82525050565b6000608082019050613baf600083018761275b565b613bbc6020830186613b8b565b613bc9604083018561275b565b613bd6606083018461275b565b9594505050505056fea2646970667358221220c52278130489c858bce232aa237d429eaf2fa5908a37ba53b56f1e453c5e920064736f6c634300080c0033",
}

// CryptoKoiBindingABI is the input ABI used to generate the binding from.
// Deprecated: Use CryptoKoiBindingMetaData.ABI instead.
var CryptoKoiBindingABI = CryptoKoiBindingMetaData.ABI

// CryptoKoiBindingBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use CryptoKoiBindingMetaData.Bin instead.
var CryptoKoiBindingBin = CryptoKoiBindingMetaData.Bin

// DeployCryptoKoiBinding deploys a new Ethereum contract, binding an instance of CryptoKoiBinding to it.
func DeployCryptoKoiBinding(auth *bind.TransactOpts, backend bind.ContractBackend, name string, symbol string) (common.Address, *types.Transaction, *CryptoKoiBinding, error) {
	parsed, err := CryptoKoiBindingMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(CryptoKoiBindingBin), backend, name, symbol)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &CryptoKoiBinding{CryptoKoiBindingCaller: CryptoKoiBindingCaller{contract: contract}, CryptoKoiBindingTransactor: CryptoKoiBindingTransactor{contract: contract}, CryptoKoiBindingFilterer: CryptoKoiBindingFilterer{contract: contract}}, nil
}

// CryptoKoiBinding is an auto generated Go binding around an Ethereum contract.
type CryptoKoiBinding struct {
	CryptoKoiBindingCaller     // Read-only binding to the contract
	CryptoKoiBindingTransactor // Write-only binding to the contract
	CryptoKoiBindingFilterer   // Log filterer for contract events
}

// CryptoKoiBindingCaller is an auto generated read-only Go binding around an Ethereum contract.
type CryptoKoiBindingCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CryptoKoiBindingTransactor is an auto generated write-only Go binding around an Ethereum contract.
type CryptoKoiBindingTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CryptoKoiBindingFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type CryptoKoiBindingFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CryptoKoiBindingSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type CryptoKoiBindingSession struct {
	Contract     *CryptoKoiBinding // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// CryptoKoiBindingCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type CryptoKoiBindingCallerSession struct {
	Contract *CryptoKoiBindingCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts           // Call options to use throughout this session
}

// CryptoKoiBindingTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type CryptoKoiBindingTransactorSession struct {
	Contract     *CryptoKoiBindingTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts           // Transaction auth options to use throughout this session
}

// CryptoKoiBindingRaw is an auto generated low-level Go binding around an Ethereum contract.
type CryptoKoiBindingRaw struct {
	Contract *CryptoKoiBinding // Generic contract binding to access the raw methods on
}

// CryptoKoiBindingCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type CryptoKoiBindingCallerRaw struct {
	Contract *CryptoKoiBindingCaller // Generic read-only contract binding to access the raw methods on
}

// CryptoKoiBindingTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type CryptoKoiBindingTransactorRaw struct {
	Contract *CryptoKoiBindingTransactor // Generic write-only contract binding to access the raw methods on
}

// NewCryptoKoiBinding creates a new instance of CryptoKoiBinding, bound to a specific deployed contract.
func NewCryptoKoiBinding(address common.Address, backend bind.ContractBackend) (*CryptoKoiBinding, error) {
	contract, err := bindCryptoKoiBinding(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &CryptoKoiBinding{CryptoKoiBindingCaller: CryptoKoiBindingCaller{contract: contract}, CryptoKoiBindingTransactor: CryptoKoiBindingTransactor{contract: contract}, CryptoKoiBindingFilterer: CryptoKoiBindingFilterer{contract: contract}}, nil
}

// NewCryptoKoiBindingCaller creates a new read-only instance of CryptoKoiBinding, bound to a specific deployed contract.
func NewCryptoKoiBindingCaller(address common.Address, caller bind.ContractCaller) (*CryptoKoiBindingCaller, error) {
	contract, err := bindCryptoKoiBinding(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &CryptoKoiBindingCaller{contract: contract}, nil
}

// NewCryptoKoiBindingTransactor creates a new write-only instance of CryptoKoiBinding, bound to a specific deployed contract.
func NewCryptoKoiBindingTransactor(address common.Address, transactor bind.ContractTransactor) (*CryptoKoiBindingTransactor, error) {
	contract, err := bindCryptoKoiBinding(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &CryptoKoiBindingTransactor{contract: contract}, nil
}

// NewCryptoKoiBindingFilterer creates a new log filterer instance of CryptoKoiBinding, bound to a specific deployed contract.
func NewCryptoKoiBindingFilterer(address common.Address, filterer bind.ContractFilterer) (*CryptoKoiBindingFilterer, error) {
	contract, err := bindCryptoKoiBinding(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &CryptoKoiBindingFilterer{contract: contract}, nil
}

// bindCryptoKoiBinding binds a generic wrapper to an already deployed contract.
func bindCryptoKoiBinding(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(CryptoKoiBindingABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_CryptoKoiBinding *CryptoKoiBindingRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _CryptoKoiBinding.Contract.CryptoKoiBindingCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_CryptoKoiBinding *CryptoKoiBindingRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CryptoKoiBinding.Contract.CryptoKoiBindingTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_CryptoKoiBinding *CryptoKoiBindingRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _CryptoKoiBinding.Contract.CryptoKoiBindingTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_CryptoKoiBinding *CryptoKoiBindingCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _CryptoKoiBinding.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_CryptoKoiBinding *CryptoKoiBindingTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CryptoKoiBinding.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_CryptoKoiBinding *CryptoKoiBindingTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _CryptoKoiBinding.Contract.contract.Transact(opts, method, params...)
}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_CryptoKoiBinding *CryptoKoiBindingCaller) DEFAULTADMINROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _CryptoKoiBinding.contract.Call(opts, &out, "DEFAULT_ADMIN_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_CryptoKoiBinding *CryptoKoiBindingSession) DEFAULTADMINROLE() ([32]byte, error) {
	return _CryptoKoiBinding.Contract.DEFAULTADMINROLE(&_CryptoKoiBinding.CallOpts)
}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_CryptoKoiBinding *CryptoKoiBindingCallerSession) DEFAULTADMINROLE() ([32]byte, error) {
	return _CryptoKoiBinding.Contract.DEFAULTADMINROLE(&_CryptoKoiBinding.CallOpts)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_CryptoKoiBinding *CryptoKoiBindingCaller) BalanceOf(opts *bind.CallOpts, owner common.Address) (*big.Int, error) {
	var out []interface{}
	err := _CryptoKoiBinding.contract.Call(opts, &out, "balanceOf", owner)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_CryptoKoiBinding *CryptoKoiBindingSession) BalanceOf(owner common.Address) (*big.Int, error) {
	return _CryptoKoiBinding.Contract.BalanceOf(&_CryptoKoiBinding.CallOpts, owner)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_CryptoKoiBinding *CryptoKoiBindingCallerSession) BalanceOf(owner common.Address) (*big.Int, error) {
	return _CryptoKoiBinding.Contract.BalanceOf(&_CryptoKoiBinding.CallOpts, owner)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_CryptoKoiBinding *CryptoKoiBindingCaller) GetApproved(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _CryptoKoiBinding.contract.Call(opts, &out, "getApproved", tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_CryptoKoiBinding *CryptoKoiBindingSession) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _CryptoKoiBinding.Contract.GetApproved(&_CryptoKoiBinding.CallOpts, tokenId)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_CryptoKoiBinding *CryptoKoiBindingCallerSession) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _CryptoKoiBinding.Contract.GetApproved(&_CryptoKoiBinding.CallOpts, tokenId)
}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_CryptoKoiBinding *CryptoKoiBindingCaller) GetRoleAdmin(opts *bind.CallOpts, role [32]byte) ([32]byte, error) {
	var out []interface{}
	err := _CryptoKoiBinding.contract.Call(opts, &out, "getRoleAdmin", role)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_CryptoKoiBinding *CryptoKoiBindingSession) GetRoleAdmin(role [32]byte) ([32]byte, error) {
	return _CryptoKoiBinding.Contract.GetRoleAdmin(&_CryptoKoiBinding.CallOpts, role)
}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_CryptoKoiBinding *CryptoKoiBindingCallerSession) GetRoleAdmin(role [32]byte) ([32]byte, error) {
	return _CryptoKoiBinding.Contract.GetRoleAdmin(&_CryptoKoiBinding.CallOpts, role)
}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_CryptoKoiBinding *CryptoKoiBindingCaller) HasRole(opts *bind.CallOpts, role [32]byte, account common.Address) (bool, error) {
	var out []interface{}
	err := _CryptoKoiBinding.contract.Call(opts, &out, "hasRole", role, account)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_CryptoKoiBinding *CryptoKoiBindingSession) HasRole(role [32]byte, account common.Address) (bool, error) {
	return _CryptoKoiBinding.Contract.HasRole(&_CryptoKoiBinding.CallOpts, role, account)
}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_CryptoKoiBinding *CryptoKoiBindingCallerSession) HasRole(role [32]byte, account common.Address) (bool, error) {
	return _CryptoKoiBinding.Contract.HasRole(&_CryptoKoiBinding.CallOpts, role, account)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_CryptoKoiBinding *CryptoKoiBindingCaller) IsApprovedForAll(opts *bind.CallOpts, owner common.Address, operator common.Address) (bool, error) {
	var out []interface{}
	err := _CryptoKoiBinding.contract.Call(opts, &out, "isApprovedForAll", owner, operator)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_CryptoKoiBinding *CryptoKoiBindingSession) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _CryptoKoiBinding.Contract.IsApprovedForAll(&_CryptoKoiBinding.CallOpts, owner, operator)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_CryptoKoiBinding *CryptoKoiBindingCallerSession) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _CryptoKoiBinding.Contract.IsApprovedForAll(&_CryptoKoiBinding.CallOpts, owner, operator)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_CryptoKoiBinding *CryptoKoiBindingCaller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _CryptoKoiBinding.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_CryptoKoiBinding *CryptoKoiBindingSession) Name() (string, error) {
	return _CryptoKoiBinding.Contract.Name(&_CryptoKoiBinding.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_CryptoKoiBinding *CryptoKoiBindingCallerSession) Name() (string, error) {
	return _CryptoKoiBinding.Contract.Name(&_CryptoKoiBinding.CallOpts)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_CryptoKoiBinding *CryptoKoiBindingCaller) OwnerOf(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _CryptoKoiBinding.contract.Call(opts, &out, "ownerOf", tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_CryptoKoiBinding *CryptoKoiBindingSession) OwnerOf(tokenId *big.Int) (common.Address, error) {
	return _CryptoKoiBinding.Contract.OwnerOf(&_CryptoKoiBinding.CallOpts, tokenId)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_CryptoKoiBinding *CryptoKoiBindingCallerSession) OwnerOf(tokenId *big.Int) (common.Address, error) {
	return _CryptoKoiBinding.Contract.OwnerOf(&_CryptoKoiBinding.CallOpts, tokenId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_CryptoKoiBinding *CryptoKoiBindingCaller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _CryptoKoiBinding.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_CryptoKoiBinding *CryptoKoiBindingSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _CryptoKoiBinding.Contract.SupportsInterface(&_CryptoKoiBinding.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_CryptoKoiBinding *CryptoKoiBindingCallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _CryptoKoiBinding.Contract.SupportsInterface(&_CryptoKoiBinding.CallOpts, interfaceId)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_CryptoKoiBinding *CryptoKoiBindingCaller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _CryptoKoiBinding.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_CryptoKoiBinding *CryptoKoiBindingSession) Symbol() (string, error) {
	return _CryptoKoiBinding.Contract.Symbol(&_CryptoKoiBinding.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_CryptoKoiBinding *CryptoKoiBindingCallerSession) Symbol() (string, error) {
	return _CryptoKoiBinding.Contract.Symbol(&_CryptoKoiBinding.CallOpts)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_CryptoKoiBinding *CryptoKoiBindingCaller) TokenURI(opts *bind.CallOpts, tokenId *big.Int) (string, error) {
	var out []interface{}
	err := _CryptoKoiBinding.contract.Call(opts, &out, "tokenURI", tokenId)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_CryptoKoiBinding *CryptoKoiBindingSession) TokenURI(tokenId *big.Int) (string, error) {
	return _CryptoKoiBinding.Contract.TokenURI(&_CryptoKoiBinding.CallOpts, tokenId)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_CryptoKoiBinding *CryptoKoiBindingCallerSession) TokenURI(tokenId *big.Int) (string, error) {
	return _CryptoKoiBinding.Contract.TokenURI(&_CryptoKoiBinding.CallOpts, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_CryptoKoiBinding *CryptoKoiBindingTransactor) Approve(opts *bind.TransactOpts, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _CryptoKoiBinding.contract.Transact(opts, "approve", to, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_CryptoKoiBinding *CryptoKoiBindingSession) Approve(to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _CryptoKoiBinding.Contract.Approve(&_CryptoKoiBinding.TransactOpts, to, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_CryptoKoiBinding *CryptoKoiBindingTransactorSession) Approve(to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _CryptoKoiBinding.Contract.Approve(&_CryptoKoiBinding.TransactOpts, to, tokenId)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_CryptoKoiBinding *CryptoKoiBindingTransactor) GrantRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _CryptoKoiBinding.contract.Transact(opts, "grantRole", role, account)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_CryptoKoiBinding *CryptoKoiBindingSession) GrantRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _CryptoKoiBinding.Contract.GrantRole(&_CryptoKoiBinding.TransactOpts, role, account)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_CryptoKoiBinding *CryptoKoiBindingTransactorSession) GrantRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _CryptoKoiBinding.Contract.GrantRole(&_CryptoKoiBinding.TransactOpts, role, account)
}

// Redeem is a paid mutator transaction binding the contract method 0x10badf4e.
//
// Solidity: function redeem(address account, uint256 tokenId, bytes signature) returns()
func (_CryptoKoiBinding *CryptoKoiBindingTransactor) Redeem(opts *bind.TransactOpts, account common.Address, tokenId *big.Int, signature []byte) (*types.Transaction, error) {
	return _CryptoKoiBinding.contract.Transact(opts, "redeem", account, tokenId, signature)
}

// Redeem is a paid mutator transaction binding the contract method 0x10badf4e.
//
// Solidity: function redeem(address account, uint256 tokenId, bytes signature) returns()
func (_CryptoKoiBinding *CryptoKoiBindingSession) Redeem(account common.Address, tokenId *big.Int, signature []byte) (*types.Transaction, error) {
	return _CryptoKoiBinding.Contract.Redeem(&_CryptoKoiBinding.TransactOpts, account, tokenId, signature)
}

// Redeem is a paid mutator transaction binding the contract method 0x10badf4e.
//
// Solidity: function redeem(address account, uint256 tokenId, bytes signature) returns()
func (_CryptoKoiBinding *CryptoKoiBindingTransactorSession) Redeem(account common.Address, tokenId *big.Int, signature []byte) (*types.Transaction, error) {
	return _CryptoKoiBinding.Contract.Redeem(&_CryptoKoiBinding.TransactOpts, account, tokenId, signature)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_CryptoKoiBinding *CryptoKoiBindingTransactor) RenounceRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _CryptoKoiBinding.contract.Transact(opts, "renounceRole", role, account)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_CryptoKoiBinding *CryptoKoiBindingSession) RenounceRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _CryptoKoiBinding.Contract.RenounceRole(&_CryptoKoiBinding.TransactOpts, role, account)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_CryptoKoiBinding *CryptoKoiBindingTransactorSession) RenounceRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _CryptoKoiBinding.Contract.RenounceRole(&_CryptoKoiBinding.TransactOpts, role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_CryptoKoiBinding *CryptoKoiBindingTransactor) RevokeRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _CryptoKoiBinding.contract.Transact(opts, "revokeRole", role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_CryptoKoiBinding *CryptoKoiBindingSession) RevokeRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _CryptoKoiBinding.Contract.RevokeRole(&_CryptoKoiBinding.TransactOpts, role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_CryptoKoiBinding *CryptoKoiBindingTransactorSession) RevokeRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _CryptoKoiBinding.Contract.RevokeRole(&_CryptoKoiBinding.TransactOpts, role, account)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_CryptoKoiBinding *CryptoKoiBindingTransactor) SafeTransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _CryptoKoiBinding.contract.Transact(opts, "safeTransferFrom", from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_CryptoKoiBinding *CryptoKoiBindingSession) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _CryptoKoiBinding.Contract.SafeTransferFrom(&_CryptoKoiBinding.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_CryptoKoiBinding *CryptoKoiBindingTransactorSession) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _CryptoKoiBinding.Contract.SafeTransferFrom(&_CryptoKoiBinding.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes _data) returns()
func (_CryptoKoiBinding *CryptoKoiBindingTransactor) SafeTransferFrom0(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int, _data []byte) (*types.Transaction, error) {
	return _CryptoKoiBinding.contract.Transact(opts, "safeTransferFrom0", from, to, tokenId, _data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes _data) returns()
func (_CryptoKoiBinding *CryptoKoiBindingSession) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, _data []byte) (*types.Transaction, error) {
	return _CryptoKoiBinding.Contract.SafeTransferFrom0(&_CryptoKoiBinding.TransactOpts, from, to, tokenId, _data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes _data) returns()
func (_CryptoKoiBinding *CryptoKoiBindingTransactorSession) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, _data []byte) (*types.Transaction, error) {
	return _CryptoKoiBinding.Contract.SafeTransferFrom0(&_CryptoKoiBinding.TransactOpts, from, to, tokenId, _data)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_CryptoKoiBinding *CryptoKoiBindingTransactor) SetApprovalForAll(opts *bind.TransactOpts, operator common.Address, approved bool) (*types.Transaction, error) {
	return _CryptoKoiBinding.contract.Transact(opts, "setApprovalForAll", operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_CryptoKoiBinding *CryptoKoiBindingSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _CryptoKoiBinding.Contract.SetApprovalForAll(&_CryptoKoiBinding.TransactOpts, operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_CryptoKoiBinding *CryptoKoiBindingTransactorSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _CryptoKoiBinding.Contract.SetApprovalForAll(&_CryptoKoiBinding.TransactOpts, operator, approved)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_CryptoKoiBinding *CryptoKoiBindingTransactor) TransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _CryptoKoiBinding.contract.Transact(opts, "transferFrom", from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_CryptoKoiBinding *CryptoKoiBindingSession) TransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _CryptoKoiBinding.Contract.TransferFrom(&_CryptoKoiBinding.TransactOpts, from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_CryptoKoiBinding *CryptoKoiBindingTransactorSession) TransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _CryptoKoiBinding.Contract.TransferFrom(&_CryptoKoiBinding.TransactOpts, from, to, tokenId)
}

// CryptoKoiBindingApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the CryptoKoiBinding contract.
type CryptoKoiBindingApprovalIterator struct {
	Event *CryptoKoiBindingApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CryptoKoiBindingApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CryptoKoiBindingApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CryptoKoiBindingApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CryptoKoiBindingApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CryptoKoiBindingApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CryptoKoiBindingApproval represents a Approval event raised by the CryptoKoiBinding contract.
type CryptoKoiBindingApproval struct {
	Owner    common.Address
	Approved common.Address
	TokenId  *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_CryptoKoiBinding *CryptoKoiBindingFilterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, approved []common.Address, tokenId []*big.Int) (*CryptoKoiBindingApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _CryptoKoiBinding.contract.FilterLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &CryptoKoiBindingApprovalIterator{contract: _CryptoKoiBinding.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_CryptoKoiBinding *CryptoKoiBindingFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *CryptoKoiBindingApproval, owner []common.Address, approved []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _CryptoKoiBinding.contract.WatchLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CryptoKoiBindingApproval)
				if err := _CryptoKoiBinding.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_CryptoKoiBinding *CryptoKoiBindingFilterer) ParseApproval(log types.Log) (*CryptoKoiBindingApproval, error) {
	event := new(CryptoKoiBindingApproval)
	if err := _CryptoKoiBinding.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CryptoKoiBindingApprovalForAllIterator is returned from FilterApprovalForAll and is used to iterate over the raw logs and unpacked data for ApprovalForAll events raised by the CryptoKoiBinding contract.
type CryptoKoiBindingApprovalForAllIterator struct {
	Event *CryptoKoiBindingApprovalForAll // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CryptoKoiBindingApprovalForAllIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CryptoKoiBindingApprovalForAll)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CryptoKoiBindingApprovalForAll)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CryptoKoiBindingApprovalForAllIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CryptoKoiBindingApprovalForAllIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CryptoKoiBindingApprovalForAll represents a ApprovalForAll event raised by the CryptoKoiBinding contract.
type CryptoKoiBindingApprovalForAll struct {
	Owner    common.Address
	Operator common.Address
	Approved bool
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApprovalForAll is a free log retrieval operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_CryptoKoiBinding *CryptoKoiBindingFilterer) FilterApprovalForAll(opts *bind.FilterOpts, owner []common.Address, operator []common.Address) (*CryptoKoiBindingApprovalForAllIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _CryptoKoiBinding.contract.FilterLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return &CryptoKoiBindingApprovalForAllIterator{contract: _CryptoKoiBinding.contract, event: "ApprovalForAll", logs: logs, sub: sub}, nil
}

// WatchApprovalForAll is a free log subscription operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_CryptoKoiBinding *CryptoKoiBindingFilterer) WatchApprovalForAll(opts *bind.WatchOpts, sink chan<- *CryptoKoiBindingApprovalForAll, owner []common.Address, operator []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _CryptoKoiBinding.contract.WatchLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CryptoKoiBindingApprovalForAll)
				if err := _CryptoKoiBinding.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApprovalForAll is a log parse operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_CryptoKoiBinding *CryptoKoiBindingFilterer) ParseApprovalForAll(log types.Log) (*CryptoKoiBindingApprovalForAll, error) {
	event := new(CryptoKoiBindingApprovalForAll)
	if err := _CryptoKoiBinding.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CryptoKoiBindingRoleAdminChangedIterator is returned from FilterRoleAdminChanged and is used to iterate over the raw logs and unpacked data for RoleAdminChanged events raised by the CryptoKoiBinding contract.
type CryptoKoiBindingRoleAdminChangedIterator struct {
	Event *CryptoKoiBindingRoleAdminChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CryptoKoiBindingRoleAdminChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CryptoKoiBindingRoleAdminChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CryptoKoiBindingRoleAdminChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CryptoKoiBindingRoleAdminChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CryptoKoiBindingRoleAdminChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CryptoKoiBindingRoleAdminChanged represents a RoleAdminChanged event raised by the CryptoKoiBinding contract.
type CryptoKoiBindingRoleAdminChanged struct {
	Role              [32]byte
	PreviousAdminRole [32]byte
	NewAdminRole      [32]byte
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterRoleAdminChanged is a free log retrieval operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_CryptoKoiBinding *CryptoKoiBindingFilterer) FilterRoleAdminChanged(opts *bind.FilterOpts, role [][32]byte, previousAdminRole [][32]byte, newAdminRole [][32]byte) (*CryptoKoiBindingRoleAdminChangedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var previousAdminRoleRule []interface{}
	for _, previousAdminRoleItem := range previousAdminRole {
		previousAdminRoleRule = append(previousAdminRoleRule, previousAdminRoleItem)
	}
	var newAdminRoleRule []interface{}
	for _, newAdminRoleItem := range newAdminRole {
		newAdminRoleRule = append(newAdminRoleRule, newAdminRoleItem)
	}

	logs, sub, err := _CryptoKoiBinding.contract.FilterLogs(opts, "RoleAdminChanged", roleRule, previousAdminRoleRule, newAdminRoleRule)
	if err != nil {
		return nil, err
	}
	return &CryptoKoiBindingRoleAdminChangedIterator{contract: _CryptoKoiBinding.contract, event: "RoleAdminChanged", logs: logs, sub: sub}, nil
}

// WatchRoleAdminChanged is a free log subscription operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_CryptoKoiBinding *CryptoKoiBindingFilterer) WatchRoleAdminChanged(opts *bind.WatchOpts, sink chan<- *CryptoKoiBindingRoleAdminChanged, role [][32]byte, previousAdminRole [][32]byte, newAdminRole [][32]byte) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var previousAdminRoleRule []interface{}
	for _, previousAdminRoleItem := range previousAdminRole {
		previousAdminRoleRule = append(previousAdminRoleRule, previousAdminRoleItem)
	}
	var newAdminRoleRule []interface{}
	for _, newAdminRoleItem := range newAdminRole {
		newAdminRoleRule = append(newAdminRoleRule, newAdminRoleItem)
	}

	logs, sub, err := _CryptoKoiBinding.contract.WatchLogs(opts, "RoleAdminChanged", roleRule, previousAdminRoleRule, newAdminRoleRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CryptoKoiBindingRoleAdminChanged)
				if err := _CryptoKoiBinding.contract.UnpackLog(event, "RoleAdminChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleAdminChanged is a log parse operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_CryptoKoiBinding *CryptoKoiBindingFilterer) ParseRoleAdminChanged(log types.Log) (*CryptoKoiBindingRoleAdminChanged, error) {
	event := new(CryptoKoiBindingRoleAdminChanged)
	if err := _CryptoKoiBinding.contract.UnpackLog(event, "RoleAdminChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CryptoKoiBindingRoleGrantedIterator is returned from FilterRoleGranted and is used to iterate over the raw logs and unpacked data for RoleGranted events raised by the CryptoKoiBinding contract.
type CryptoKoiBindingRoleGrantedIterator struct {
	Event *CryptoKoiBindingRoleGranted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CryptoKoiBindingRoleGrantedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CryptoKoiBindingRoleGranted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CryptoKoiBindingRoleGranted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CryptoKoiBindingRoleGrantedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CryptoKoiBindingRoleGrantedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CryptoKoiBindingRoleGranted represents a RoleGranted event raised by the CryptoKoiBinding contract.
type CryptoKoiBindingRoleGranted struct {
	Role    [32]byte
	Account common.Address
	Sender  common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRoleGranted is a free log retrieval operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_CryptoKoiBinding *CryptoKoiBindingFilterer) FilterRoleGranted(opts *bind.FilterOpts, role [][32]byte, account []common.Address, sender []common.Address) (*CryptoKoiBindingRoleGrantedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _CryptoKoiBinding.contract.FilterLogs(opts, "RoleGranted", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &CryptoKoiBindingRoleGrantedIterator{contract: _CryptoKoiBinding.contract, event: "RoleGranted", logs: logs, sub: sub}, nil
}

// WatchRoleGranted is a free log subscription operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_CryptoKoiBinding *CryptoKoiBindingFilterer) WatchRoleGranted(opts *bind.WatchOpts, sink chan<- *CryptoKoiBindingRoleGranted, role [][32]byte, account []common.Address, sender []common.Address) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _CryptoKoiBinding.contract.WatchLogs(opts, "RoleGranted", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CryptoKoiBindingRoleGranted)
				if err := _CryptoKoiBinding.contract.UnpackLog(event, "RoleGranted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleGranted is a log parse operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_CryptoKoiBinding *CryptoKoiBindingFilterer) ParseRoleGranted(log types.Log) (*CryptoKoiBindingRoleGranted, error) {
	event := new(CryptoKoiBindingRoleGranted)
	if err := _CryptoKoiBinding.contract.UnpackLog(event, "RoleGranted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CryptoKoiBindingRoleRevokedIterator is returned from FilterRoleRevoked and is used to iterate over the raw logs and unpacked data for RoleRevoked events raised by the CryptoKoiBinding contract.
type CryptoKoiBindingRoleRevokedIterator struct {
	Event *CryptoKoiBindingRoleRevoked // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CryptoKoiBindingRoleRevokedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CryptoKoiBindingRoleRevoked)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CryptoKoiBindingRoleRevoked)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CryptoKoiBindingRoleRevokedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CryptoKoiBindingRoleRevokedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CryptoKoiBindingRoleRevoked represents a RoleRevoked event raised by the CryptoKoiBinding contract.
type CryptoKoiBindingRoleRevoked struct {
	Role    [32]byte
	Account common.Address
	Sender  common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRoleRevoked is a free log retrieval operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_CryptoKoiBinding *CryptoKoiBindingFilterer) FilterRoleRevoked(opts *bind.FilterOpts, role [][32]byte, account []common.Address, sender []common.Address) (*CryptoKoiBindingRoleRevokedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _CryptoKoiBinding.contract.FilterLogs(opts, "RoleRevoked", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &CryptoKoiBindingRoleRevokedIterator{contract: _CryptoKoiBinding.contract, event: "RoleRevoked", logs: logs, sub: sub}, nil
}

// WatchRoleRevoked is a free log subscription operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_CryptoKoiBinding *CryptoKoiBindingFilterer) WatchRoleRevoked(opts *bind.WatchOpts, sink chan<- *CryptoKoiBindingRoleRevoked, role [][32]byte, account []common.Address, sender []common.Address) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _CryptoKoiBinding.contract.WatchLogs(opts, "RoleRevoked", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CryptoKoiBindingRoleRevoked)
				if err := _CryptoKoiBinding.contract.UnpackLog(event, "RoleRevoked", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleRevoked is a log parse operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_CryptoKoiBinding *CryptoKoiBindingFilterer) ParseRoleRevoked(log types.Log) (*CryptoKoiBindingRoleRevoked, error) {
	event := new(CryptoKoiBindingRoleRevoked)
	if err := _CryptoKoiBinding.contract.UnpackLog(event, "RoleRevoked", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CryptoKoiBindingTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the CryptoKoiBinding contract.
type CryptoKoiBindingTransferIterator struct {
	Event *CryptoKoiBindingTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CryptoKoiBindingTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CryptoKoiBindingTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CryptoKoiBindingTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CryptoKoiBindingTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CryptoKoiBindingTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CryptoKoiBindingTransfer represents a Transfer event raised by the CryptoKoiBinding contract.
type CryptoKoiBindingTransfer struct {
	From    common.Address
	To      common.Address
	TokenId *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_CryptoKoiBinding *CryptoKoiBindingFilterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address, tokenId []*big.Int) (*CryptoKoiBindingTransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _CryptoKoiBinding.contract.FilterLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &CryptoKoiBindingTransferIterator{contract: _CryptoKoiBinding.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_CryptoKoiBinding *CryptoKoiBindingFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *CryptoKoiBindingTransfer, from []common.Address, to []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _CryptoKoiBinding.contract.WatchLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CryptoKoiBindingTransfer)
				if err := _CryptoKoiBinding.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_CryptoKoiBinding *CryptoKoiBindingFilterer) ParseTransfer(log types.Log) (*CryptoKoiBindingTransfer, error) {
	event := new(CryptoKoiBindingTransfer)
	if err := _CryptoKoiBinding.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
